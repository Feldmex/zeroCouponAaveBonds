/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AzcBammInterface extends ethers.utils.Interface {
  functions: {
    "FCPaddress()": FunctionFragment;
    "ReserveQuoteFromSpecificTokens(int128,bool)": FunctionFragment;
    "ReserveQuoteToSpecificTokens(int128,bool)": FunctionFragment;
    "SwapFromSpecificTokens(int128,bool)": FunctionFragment;
    "SwapFromSpecificTokensWithLimit(int128,bool,uint256)": FunctionFragment;
    "SwapToSpecificTokens(int128,bool)": FunctionFragment;
    "SwapToSpecificTokensWithLimit(int128,bool,uint256)": FunctionFragment;
    "TakeQuote(uint256,uint256,bool,bool)": FunctionFragment;
    "YTaddress()": FunctionFragment;
    "ZCBaddress()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "anchor()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "firstMint(uint128,uint128)": FunctionFragment;
    "forceRateDataUpdate()": FunctionFragment;
    "getAPYFromOracle()": FunctionFragment;
    "getImpliedRateData()": FunctionFragment;
    "getRateFromOracle()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "impliedYieldOverYears(int128)": FunctionFragment;
    "impliedYieldToMaturity()": FunctionFragment;
    "inflatedTotalSupply()": FunctionFragment;
    "maturity()": FunctionFragment;
    "mint(uint256,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nextAnchor()": FunctionFragment;
    "recalibrate(uint256,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FCPaddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ReserveQuoteFromSpecificTokens",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "ReserveQuoteToSpecificTokens",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "SwapFromSpecificTokens",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "SwapFromSpecificTokensWithLimit",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SwapToSpecificTokens",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "SwapToSpecificTokensWithLimit",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "TakeQuote",
    values: [BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "YTaddress", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ZCBaddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "anchor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstMint",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceRateDataUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAPYFromOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getImpliedRateData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRateFromOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "impliedYieldOverYears",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "impliedYieldToMaturity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inflatedTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maturity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextAnchor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recalibrate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "FCPaddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ReserveQuoteFromSpecificTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ReserveQuoteToSpecificTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SwapFromSpecificTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SwapFromSpecificTokensWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SwapToSpecificTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SwapToSpecificTokensWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TakeQuote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "YTaddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ZCBaddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anchor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "firstMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceRateDataUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAPYFromOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImpliedRateData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRateFromOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "impliedYieldOverYears",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "impliedYieldToMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inflatedTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maturity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextAnchor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recalibrate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Burn(address,uint256)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "Swap(address,uint256,uint256,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class AzcBamm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AzcBammInterface;

  functions: {
    FCPaddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "FCPaddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ReserveQuoteFromSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ReserveQuoteFromSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ReserveQuoteToSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ReserveQuoteToSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SwapFromSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SwapFromSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SwapFromSpecificTokensWithLimit(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _minAmtOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SwapFromSpecificTokensWithLimit(int128,bool,uint256)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _minAmtOut: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SwapToSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SwapToSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SwapToSpecificTokensWithLimit(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _maxAmtIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SwapToSpecificTokensWithLimit(int128,bool,uint256)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _maxAmtIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    TakeQuote(
      _amountIn: BigNumberish,
      _amountOut: BigNumberish,
      _ZCBin: boolean,
      _ToSpecific: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "TakeQuote(uint256,uint256,bool,bool)"(
      _amountIn: BigNumberish,
      _amountOut: BigNumberish,
      _ZCBin: boolean,
      _ToSpecific: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    YTaddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "YTaddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ZCBaddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ZCBaddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    anchor(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "anchor()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    burn(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    firstMint(
      _Uin: BigNumberish,
      _ZCBin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "firstMint(uint128,uint128)"(
      _Uin: BigNumberish,
      _ZCBin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forceRateDataUpdate(overrides?: Overrides): Promise<ContractTransaction>;

    "forceRateDataUpdate()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAPYFromOracle(overrides?: CallOverrides): Promise<{
      APY: BigNumber;
      0: BigNumber;
    }>;

    "getAPYFromOracle()"(overrides?: CallOverrides): Promise<{
      APY: BigNumber;
      0: BigNumber;
    }>;

    getImpliedRateData(overrides?: CallOverrides): Promise<{
      _impliedRates: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      _timestamps: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      1: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    "getImpliedRateData()"(overrides?: CallOverrides): Promise<{
      _impliedRates: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      _timestamps: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      1: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    getRateFromOracle(overrides?: CallOverrides): Promise<{
      rate: BigNumber;
      0: BigNumber;
    }>;

    "getRateFromOracle()"(overrides?: CallOverrides): Promise<{
      rate: BigNumber;
      0: BigNumber;
    }>;

    getReserves(overrides?: CallOverrides): Promise<{
      _Ureserves: BigNumber;
      _ZCBreserves: BigNumber;
      _TimeRemaining: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getReserves()"(overrides?: CallOverrides): Promise<{
      _Ureserves: BigNumber;
      _ZCBreserves: BigNumber;
      _TimeRemaining: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    impliedYieldOverYears(
      _years: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      yield: BigNumber;
      0: BigNumber;
    }>;

    "impliedYieldOverYears(int128)"(
      _years: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      yield: BigNumber;
      0: BigNumber;
    }>;

    impliedYieldToMaturity(overrides?: CallOverrides): Promise<{
      yield: BigNumber;
      0: BigNumber;
    }>;

    "impliedYieldToMaturity()"(overrides?: CallOverrides): Promise<{
      yield: BigNumber;
      0: BigNumber;
    }>;

    inflatedTotalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "inflatedTotalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maturity(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maturity()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    mint(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxZCBin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxZCBin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      _name: string;
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      _name: string;
      0: string;
    }>;

    nextAnchor(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "nextAnchor()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    recalibrate(
      lowerBoundAnchor: BigNumberish,
      upperBoundAnchor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recalibrate(uint256,uint256)"(
      lowerBoundAnchor: BigNumberish,
      upperBoundAnchor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      _symbol: string;
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      _symbol: string;
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  FCPaddress(overrides?: CallOverrides): Promise<string>;

  "FCPaddress()"(overrides?: CallOverrides): Promise<string>;

  ReserveQuoteFromSpecificTokens(
    _amount: BigNumberish,
    _ZCBin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ReserveQuoteFromSpecificTokens(int128,bool)"(
    _amount: BigNumberish,
    _ZCBin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ReserveQuoteToSpecificTokens(
    _amount: BigNumberish,
    _ZCBin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ReserveQuoteToSpecificTokens(int128,bool)"(
    _amount: BigNumberish,
    _ZCBin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SwapFromSpecificTokens(
    _amount: BigNumberish,
    _ZCBin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SwapFromSpecificTokens(int128,bool)"(
    _amount: BigNumberish,
    _ZCBin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SwapFromSpecificTokensWithLimit(
    _amount: BigNumberish,
    _ZCBin: boolean,
    _minAmtOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SwapFromSpecificTokensWithLimit(int128,bool,uint256)"(
    _amount: BigNumberish,
    _ZCBin: boolean,
    _minAmtOut: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SwapToSpecificTokens(
    _amount: BigNumberish,
    _ZCBin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SwapToSpecificTokens(int128,bool)"(
    _amount: BigNumberish,
    _ZCBin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SwapToSpecificTokensWithLimit(
    _amount: BigNumberish,
    _ZCBin: boolean,
    _maxAmtIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SwapToSpecificTokensWithLimit(int128,bool,uint256)"(
    _amount: BigNumberish,
    _ZCBin: boolean,
    _maxAmtIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  TakeQuote(
    _amountIn: BigNumberish,
    _amountOut: BigNumberish,
    _ZCBin: boolean,
    _ToSpecific: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "TakeQuote(uint256,uint256,bool,bool)"(
    _amountIn: BigNumberish,
    _amountOut: BigNumberish,
    _ZCBin: boolean,
    _ToSpecific: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  YTaddress(overrides?: CallOverrides): Promise<string>;

  "YTaddress()"(overrides?: CallOverrides): Promise<string>;

  ZCBaddress(overrides?: CallOverrides): Promise<string>;

  "ZCBaddress()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  anchor(overrides?: CallOverrides): Promise<BigNumber>;

  "anchor()"(overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  firstMint(
    _Uin: BigNumberish,
    _ZCBin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "firstMint(uint128,uint128)"(
    _Uin: BigNumberish,
    _ZCBin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forceRateDataUpdate(overrides?: Overrides): Promise<ContractTransaction>;

  "forceRateDataUpdate()"(overrides?: Overrides): Promise<ContractTransaction>;

  getAPYFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

  "getAPYFromOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

  getImpliedRateData(overrides?: CallOverrides): Promise<{
    _impliedRates: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    _timestamps: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    0: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    1: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
  }>;

  "getImpliedRateData()"(overrides?: CallOverrides): Promise<{
    _impliedRates: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    _timestamps: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    0: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    1: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
  }>;

  getRateFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

  "getRateFromOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

  getReserves(overrides?: CallOverrides): Promise<{
    _Ureserves: BigNumber;
    _ZCBreserves: BigNumber;
    _TimeRemaining: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getReserves()"(overrides?: CallOverrides): Promise<{
    _Ureserves: BigNumber;
    _ZCBreserves: BigNumber;
    _TimeRemaining: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  impliedYieldOverYears(
    _years: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "impliedYieldOverYears(int128)"(
    _years: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  impliedYieldToMaturity(overrides?: CallOverrides): Promise<BigNumber>;

  "impliedYieldToMaturity()"(overrides?: CallOverrides): Promise<BigNumber>;

  inflatedTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "inflatedTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  maturity(overrides?: CallOverrides): Promise<BigNumber>;

  "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _amount: BigNumberish,
    _maxUin: BigNumberish,
    _maxZCBin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(uint256,uint256,uint256)"(
    _amount: BigNumberish,
    _maxUin: BigNumberish,
    _maxZCBin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nextAnchor(overrides?: CallOverrides): Promise<BigNumber>;

  "nextAnchor()"(overrides?: CallOverrides): Promise<BigNumber>;

  recalibrate(
    lowerBoundAnchor: BigNumberish,
    upperBoundAnchor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recalibrate(uint256,uint256)"(
    lowerBoundAnchor: BigNumberish,
    upperBoundAnchor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    FCPaddress(overrides?: CallOverrides): Promise<string>;

    "FCPaddress()"(overrides?: CallOverrides): Promise<string>;

    ReserveQuoteFromSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ReserveQuoteFromSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ReserveQuoteToSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ReserveQuoteToSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SwapFromSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SwapFromSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SwapFromSpecificTokensWithLimit(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _minAmtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SwapFromSpecificTokensWithLimit(int128,bool,uint256)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _minAmtOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SwapToSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SwapToSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SwapToSpecificTokensWithLimit(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _maxAmtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SwapToSpecificTokensWithLimit(int128,bool,uint256)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _maxAmtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TakeQuote(
      _amountIn: BigNumberish,
      _amountOut: BigNumberish,
      _ZCBin: boolean,
      _ToSpecific: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "TakeQuote(uint256,uint256,bool,bool)"(
      _amountIn: BigNumberish,
      _amountOut: BigNumberish,
      _ZCBin: boolean,
      _ToSpecific: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    YTaddress(overrides?: CallOverrides): Promise<string>;

    "YTaddress()"(overrides?: CallOverrides): Promise<string>;

    ZCBaddress(overrides?: CallOverrides): Promise<string>;

    "ZCBaddress()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anchor(overrides?: CallOverrides): Promise<BigNumber>;

    "anchor()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burn(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    firstMint(
      _Uin: BigNumberish,
      _ZCBin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "firstMint(uint128,uint128)"(
      _Uin: BigNumberish,
      _ZCBin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceRateDataUpdate(overrides?: CallOverrides): Promise<void>;

    "forceRateDataUpdate()"(overrides?: CallOverrides): Promise<void>;

    getAPYFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getAPYFromOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getImpliedRateData(overrides?: CallOverrides): Promise<{
      _impliedRates: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      _timestamps: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      1: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    "getImpliedRateData()"(overrides?: CallOverrides): Promise<{
      _impliedRates: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      _timestamps: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      1: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    getRateFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getRateFromOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<{
      _Ureserves: BigNumber;
      _ZCBreserves: BigNumber;
      _TimeRemaining: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getReserves()"(overrides?: CallOverrides): Promise<{
      _Ureserves: BigNumber;
      _ZCBreserves: BigNumber;
      _TimeRemaining: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    impliedYieldOverYears(
      _years: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "impliedYieldOverYears(int128)"(
      _years: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    impliedYieldToMaturity(overrides?: CallOverrides): Promise<BigNumber>;

    "impliedYieldToMaturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    inflatedTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "inflatedTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxZCBin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxZCBin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nextAnchor(overrides?: CallOverrides): Promise<BigNumber>;

    "nextAnchor()"(overrides?: CallOverrides): Promise<BigNumber>;

    recalibrate(
      lowerBoundAnchor: BigNumberish,
      upperBoundAnchor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recalibrate(uint256,uint256)"(
      lowerBoundAnchor: BigNumberish,
      upperBoundAnchor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      _owner: string | null,
      _spender: string | null,
      _value: null
    ): EventFilter;

    Burn(user: null, amount: null): EventFilter;

    Mint(user: null, amount: null): EventFilter;

    Swap(user: null, amountZCB: null, amountU: null, ZCBin: null): EventFilter;

    Transfer(
      _from: string | null,
      _to: string | null,
      _value: null
    ): EventFilter;
  };

  estimateGas: {
    FCPaddress(overrides?: CallOverrides): Promise<BigNumber>;

    "FCPaddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    ReserveQuoteFromSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ReserveQuoteFromSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ReserveQuoteToSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ReserveQuoteToSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    SwapFromSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SwapFromSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    SwapFromSpecificTokensWithLimit(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _minAmtOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SwapFromSpecificTokensWithLimit(int128,bool,uint256)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _minAmtOut: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    SwapToSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SwapToSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    SwapToSpecificTokensWithLimit(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _maxAmtIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SwapToSpecificTokensWithLimit(int128,bool,uint256)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _maxAmtIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    TakeQuote(
      _amountIn: BigNumberish,
      _amountOut: BigNumberish,
      _ZCBin: boolean,
      _ToSpecific: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "TakeQuote(uint256,uint256,bool,bool)"(
      _amountIn: BigNumberish,
      _amountOut: BigNumberish,
      _ZCBin: boolean,
      _ToSpecific: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    YTaddress(overrides?: CallOverrides): Promise<BigNumber>;

    "YTaddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    ZCBaddress(overrides?: CallOverrides): Promise<BigNumber>;

    "ZCBaddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    anchor(overrides?: CallOverrides): Promise<BigNumber>;

    "anchor()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "burn(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    firstMint(
      _Uin: BigNumberish,
      _ZCBin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "firstMint(uint128,uint128)"(
      _Uin: BigNumberish,
      _ZCBin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forceRateDataUpdate(overrides?: Overrides): Promise<BigNumber>;

    "forceRateDataUpdate()"(overrides?: Overrides): Promise<BigNumber>;

    getAPYFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getAPYFromOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getImpliedRateData(overrides?: CallOverrides): Promise<BigNumber>;

    "getImpliedRateData()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRateFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getRateFromOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    impliedYieldOverYears(
      _years: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "impliedYieldOverYears(int128)"(
      _years: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    impliedYieldToMaturity(overrides?: CallOverrides): Promise<BigNumber>;

    "impliedYieldToMaturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    inflatedTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "inflatedTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxZCBin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxZCBin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextAnchor(overrides?: CallOverrides): Promise<BigNumber>;

    "nextAnchor()"(overrides?: CallOverrides): Promise<BigNumber>;

    recalibrate(
      lowerBoundAnchor: BigNumberish,
      upperBoundAnchor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recalibrate(uint256,uint256)"(
      lowerBoundAnchor: BigNumberish,
      upperBoundAnchor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FCPaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FCPaddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ReserveQuoteFromSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ReserveQuoteFromSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ReserveQuoteToSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ReserveQuoteToSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SwapFromSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SwapFromSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SwapFromSpecificTokensWithLimit(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _minAmtOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SwapFromSpecificTokensWithLimit(int128,bool,uint256)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _minAmtOut: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SwapToSpecificTokens(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SwapToSpecificTokens(int128,bool)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SwapToSpecificTokensWithLimit(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _maxAmtIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SwapToSpecificTokensWithLimit(int128,bool,uint256)"(
      _amount: BigNumberish,
      _ZCBin: boolean,
      _maxAmtIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    TakeQuote(
      _amountIn: BigNumberish,
      _amountOut: BigNumberish,
      _ZCBin: boolean,
      _ToSpecific: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "TakeQuote(uint256,uint256,bool,bool)"(
      _amountIn: BigNumberish,
      _amountOut: BigNumberish,
      _ZCBin: boolean,
      _ToSpecific: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    YTaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "YTaddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZCBaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ZCBaddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    anchor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "anchor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstMint(
      _Uin: BigNumberish,
      _ZCBin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "firstMint(uint128,uint128)"(
      _Uin: BigNumberish,
      _ZCBin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forceRateDataUpdate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "forceRateDataUpdate()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAPYFromOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAPYFromOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImpliedRateData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getImpliedRateData()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRateFromOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRateFromOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    impliedYieldOverYears(
      _years: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "impliedYieldOverYears(int128)"(
      _years: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    impliedYieldToMaturity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "impliedYieldToMaturity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inflatedTotalSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "inflatedTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maturity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maturity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxZCBin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxZCBin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextAnchor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextAnchor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recalibrate(
      lowerBoundAnchor: BigNumberish,
      upperBoundAnchor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recalibrate(uint256,uint256)"(
      lowerBoundAnchor: BigNumberish,
      upperBoundAnchor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
