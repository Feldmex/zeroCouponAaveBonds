/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface YTammDelegateInterface extends ethers.utils.Interface {
  functions: {
    "FCPaddress()": FunctionFragment;
    "SlippageConstant()": FunctionFragment;
    "YTaddress()": FunctionFragment;
    "YTtoLmultiplier()": FunctionFragment;
    "ZCBaddress()": FunctionFragment;
    "ZCBammAddress()": FunctionFragment;
    "activeTotalSupply()": FunctionFragment;
    "contractBondDividend(uint256)": FunctionFragment;
    "contractClaimDividend()": FunctionFragment;
    "contractYieldDividend(uint256)": FunctionFragment;
    "ineligibleBalanceOf(address)": FunctionFragment;
    "lastRecalibration()": FunctionFragment;
    "lastWithdraw()": FunctionFragment;
    "maturity()": FunctionFragment;
    "recalibrate()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FCPaddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SlippageConstant",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "YTaddress", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "YTtoLmultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZCBaddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZCBammAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractBondDividend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractClaimDividend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractYieldDividend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ineligibleBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastRecalibration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maturity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recalibrate",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "FCPaddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SlippageConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "YTaddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "YTtoLmultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZCBaddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ZCBammAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractBondDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractClaimDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractYieldDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ineligibleBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRecalibration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maturity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recalibrate",
    data: BytesLike
  ): Result;

  events: {};
}

export class YTammDelegate extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: YTammDelegateInterface;

  functions: {
    FCPaddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "FCPaddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    SlippageConstant(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "SlippageConstant()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    YTaddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "YTaddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    YTtoLmultiplier(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "YTtoLmultiplier()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    ZCBaddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ZCBaddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ZCBammAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ZCBammAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    activeTotalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "activeTotalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    contractBondDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "contractBondDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    contractClaimDividend(overrides?: Overrides): Promise<ContractTransaction>;

    "contractClaimDividend()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    contractYieldDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "contractYieldDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ineligibleBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ineligibleBalanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastRecalibration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastRecalibration()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lastWithdraw(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastWithdraw()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maturity(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maturity()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    recalibrate(overrides?: Overrides): Promise<ContractTransaction>;

    "recalibrate()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  FCPaddress(overrides?: CallOverrides): Promise<string>;

  "FCPaddress()"(overrides?: CallOverrides): Promise<string>;

  SlippageConstant(overrides?: CallOverrides): Promise<BigNumber>;

  "SlippageConstant()"(overrides?: CallOverrides): Promise<BigNumber>;

  YTaddress(overrides?: CallOverrides): Promise<string>;

  "YTaddress()"(overrides?: CallOverrides): Promise<string>;

  YTtoLmultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "YTtoLmultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  ZCBaddress(overrides?: CallOverrides): Promise<string>;

  "ZCBaddress()"(overrides?: CallOverrides): Promise<string>;

  ZCBammAddress(overrides?: CallOverrides): Promise<string>;

  "ZCBammAddress()"(overrides?: CallOverrides): Promise<string>;

  activeTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "activeTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  contractBondDividend(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "contractBondDividend(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contractClaimDividend(overrides?: Overrides): Promise<ContractTransaction>;

  "contractClaimDividend()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  contractYieldDividend(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "contractYieldDividend(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ineligibleBalanceOf(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "ineligibleBalanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastRecalibration(overrides?: CallOverrides): Promise<BigNumber>;

  "lastRecalibration()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  "lastWithdraw()"(overrides?: CallOverrides): Promise<BigNumber>;

  maturity(overrides?: CallOverrides): Promise<BigNumber>;

  "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

  recalibrate(overrides?: Overrides): Promise<ContractTransaction>;

  "recalibrate()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    FCPaddress(overrides?: CallOverrides): Promise<string>;

    "FCPaddress()"(overrides?: CallOverrides): Promise<string>;

    SlippageConstant(overrides?: CallOverrides): Promise<BigNumber>;

    "SlippageConstant()"(overrides?: CallOverrides): Promise<BigNumber>;

    YTaddress(overrides?: CallOverrides): Promise<string>;

    "YTaddress()"(overrides?: CallOverrides): Promise<string>;

    YTtoLmultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "YTtoLmultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    ZCBaddress(overrides?: CallOverrides): Promise<string>;

    "ZCBaddress()"(overrides?: CallOverrides): Promise<string>;

    ZCBammAddress(overrides?: CallOverrides): Promise<string>;

    "ZCBammAddress()"(overrides?: CallOverrides): Promise<string>;

    activeTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "activeTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractBondDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractBondDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractClaimDividend(overrides?: CallOverrides): Promise<void>;

    "contractClaimDividend()"(overrides?: CallOverrides): Promise<void>;

    contractYieldDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractYieldDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ineligibleBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ineligibleBalanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRecalibration(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRecalibration()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    "lastWithdraw()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    recalibrate(overrides?: CallOverrides): Promise<void>;

    "recalibrate()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    FCPaddress(overrides?: CallOverrides): Promise<BigNumber>;

    "FCPaddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    SlippageConstant(overrides?: CallOverrides): Promise<BigNumber>;

    "SlippageConstant()"(overrides?: CallOverrides): Promise<BigNumber>;

    YTaddress(overrides?: CallOverrides): Promise<BigNumber>;

    "YTaddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    YTtoLmultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "YTtoLmultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    ZCBaddress(overrides?: CallOverrides): Promise<BigNumber>;

    "ZCBaddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    ZCBammAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "ZCBammAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    activeTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "activeTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    contractBondDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractBondDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractClaimDividend(overrides?: Overrides): Promise<BigNumber>;

    "contractClaimDividend()"(overrides?: Overrides): Promise<BigNumber>;

    contractYieldDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractYieldDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ineligibleBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ineligibleBalanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastRecalibration(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRecalibration()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    "lastWithdraw()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    recalibrate(overrides?: Overrides): Promise<BigNumber>;

    "recalibrate()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FCPaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FCPaddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SlippageConstant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SlippageConstant()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    YTaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "YTaddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YTtoLmultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "YTtoLmultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZCBaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ZCBaddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZCBammAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ZCBammAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "activeTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractBondDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractBondDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractClaimDividend(overrides?: Overrides): Promise<PopulatedTransaction>;

    "contractClaimDividend()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    contractYieldDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractYieldDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ineligibleBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ineligibleBalanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRecalibration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastRecalibration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastWithdraw()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maturity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maturity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recalibrate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "recalibrate()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
