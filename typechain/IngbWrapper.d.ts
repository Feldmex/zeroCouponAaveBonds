/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IngbWrapperInterface extends ethers.utils.Interface {
  functions: {
    "FCPDirectClaimSubAccountRewards(bool,bool,address,uint256,uint256)": FunctionFragment;
    "FCPDirectDoubleClaimSubAccountRewards(bool,bool,address[2],uint256[2],uint256[2])": FunctionFragment;
    "UnitAmtToWrappedAmt_RoundDown(uint256)": FunctionFragment;
    "UnitAmtToWrappedAmt_RoundUp(uint256)": FunctionFragment;
    "WrappedAmtToUnitAmt_RoundDown(uint256)": FunctionFragment;
    "WrappedAmtToUnitAmt_RoundUp(uint256)": FunctionFragment;
    "addRewardAsset(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "deactivateRewardAsset(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "delistDistributionAccount()": FunctionFragment;
    "depositUnitAmount(address,uint256)": FunctionFragment;
    "depositWrappedAmount(address,uint256)": FunctionFragment;
    "distributionAccountRewards(uint256,address)": FunctionFragment;
    "editSubAccountPosition(bool,address,address,int256,int256)": FunctionFragment;
    "flashFee(address,uint256)": FunctionFragment;
    "flashLoan(address,address,uint256,bytes)": FunctionFragment;
    "flashLoanFee()": FunctionFragment;
    "forceClaimSubAccountRewards(bool,address,address,address)": FunctionFragment;
    "forceHarvest()": FunctionFragment;
    "forceRewardsCollection()": FunctionFragment;
    "getStatus()": FunctionFragment;
    "harvestNonListedRewardAsset(address)": FunctionFragment;
    "hasClaimedAllYTRewards(address,address,address)": FunctionFragment;
    "immutableRewardsAssets(uint256)": FunctionFragment;
    "infoOracleAddress()": FunctionFragment;
    "isDistributionAccount(address)": FunctionFragment;
    "lastHarvest()": FunctionFragment;
    "lastUpdate()": FunctionFragment;
    "maxFlashLoan(address)": FunctionFragment;
    "name()": FunctionFragment;
    "numRewardsAssets()": FunctionFragment;
    "prevContractBalance(uint256)": FunctionFragment;
    "prevRatio()": FunctionFragment;
    "prevTotalRewardsPerWasset(uint256,address)": FunctionFragment;
    "reactivateRewardAsset(uint256)": FunctionFragment;
    "registerAsDistributionAccount()": FunctionFragment;
    "rewardsAssets(uint256)": FunctionFragment;
    "setFlashLoanFee(uint256)": FunctionFragment;
    "setInterestFee(uint32)": FunctionFragment;
    "subAccountPositions(address,address,address)": FunctionFragment;
    "subAccountPrevTotalReturnsPerWasset(uint256,address,address,address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalRewardsPerWasset(uint256)": FunctionFragment;
    "totalRewardsPerWassetUponActivation(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlyingAssetAddress()": FunctionFragment;
    "underlyingIsStatic()": FunctionFragment;
    "withdrawUnitAmount(address,uint256,bool)": FunctionFragment;
    "withdrawWrappedAmount(address,uint256,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FCPDirectClaimSubAccountRewards",
    values: [boolean, boolean, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "FCPDirectDoubleClaimSubAccountRewards",
    values: [
      boolean,
      boolean,
      [string, string],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "UnitAmtToWrappedAmt_RoundDown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UnitAmtToWrappedAmt_RoundUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "WrappedAmtToUnitAmt_RoundDown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "WrappedAmtToUnitAmt_RoundUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deactivateRewardAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delistDistributionAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositUnitAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWrappedAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributionAccountRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "editSubAccountPosition",
    values: [boolean, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoanFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceClaimSubAccountRewards",
    values: [boolean, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "forceHarvest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceRewardsCollection",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getStatus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestNonListedRewardAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimedAllYTRewards",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "immutableRewardsAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "infoOracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDistributionAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastHarvest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFlashLoan",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numRewardsAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "prevContractBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "prevRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prevTotalRewardsPerWasset",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reactivateRewardAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsDistributionAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlashLoanFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "subAccountPositions",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "subAccountPrevTotalReturnsPerWasset",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalRewardsPerWasset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardsPerWassetUponActivation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAssetAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingIsStatic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUnitAmount",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWrappedAmount",
    values: [string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "FCPDirectClaimSubAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FCPDirectDoubleClaimSubAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UnitAmtToWrappedAmt_RoundDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UnitAmtToWrappedAmt_RoundUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WrappedAmtToUnitAmt_RoundDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WrappedAmtToUnitAmt_RoundUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateRewardAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delistDistributionAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUnitAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWrappedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributionAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editSubAccountPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flashLoanFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceClaimSubAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceRewardsCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestNonListedRewardAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimedAllYTRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "immutableRewardsAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "infoOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDistributionAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numRewardsAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prevContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prevRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevTotalRewardsPerWasset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reactivateRewardAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsDistributionAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlashLoanFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subAccountPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subAccountPrevTotalReturnsPerWasset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsPerWasset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsPerWassetUponActivation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAssetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingIsStatic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnitAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWrappedAmount",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "FlashBurn(address,uint256,uint256)": EventFragment;
    "FlashMint(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class IngbWrapper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IngbWrapperInterface;

  functions: {
    FCPDirectClaimSubAccountRewards(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAcct: string,
      _yield: BigNumberish,
      _wrappedClaim: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "FCPDirectClaimSubAccountRewards(bool,bool,address,uint256,uint256)"(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAcct: string,
      _yield: BigNumberish,
      _wrappedClaim: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    FCPDirectDoubleClaimSubAccountRewards(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "FCPDirectDoubleClaimSubAccountRewards(bool,bool,address[2],uint256[2],uint256[2])"(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    UnitAmtToWrappedAmt_RoundDown(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountWrapped: BigNumber;
      0: BigNumber;
    }>;

    "UnitAmtToWrappedAmt_RoundDown(uint256)"(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountWrapped: BigNumber;
      0: BigNumber;
    }>;

    UnitAmtToWrappedAmt_RoundUp(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountWrapped: BigNumber;
      0: BigNumber;
    }>;

    "UnitAmtToWrappedAmt_RoundUp(uint256)"(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _amountWrapped: BigNumber;
      0: BigNumber;
    }>;

    WrappedAmtToUnitAmt_RoundDown(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _unitAmount: BigNumber;
      0: BigNumber;
    }>;

    "WrappedAmtToUnitAmt_RoundDown(uint256)"(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _unitAmount: BigNumber;
      0: BigNumber;
    }>;

    WrappedAmtToUnitAmt_RoundUp(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _unitAmount: BigNumber;
      0: BigNumber;
    }>;

    "WrappedAmtToUnitAmt_RoundUp(uint256)"(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _unitAmount: BigNumber;
      0: BigNumber;
    }>;

    addRewardAsset(
      _rewardsAsset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRewardAsset(address)"(
      _rewardsAsset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<{
      remaining: BigNumber;
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<{
      remaining: BigNumber;
      0: BigNumber;
    }>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    deactivateRewardAsset(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deactivateRewardAsset(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<{
      digits: number;
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      digits: number;
      0: number;
    }>;

    delistDistributionAccount(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delistDistributionAccount()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositUnitAmount(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositUnitAmount(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositWrappedAmount(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositWrappedAmount(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    distributionAccountRewards(
      _index: BigNumberish,
      _distributionAccount: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "distributionAccountRewards(uint256,address)"(
      _index: BigNumberish,
      _distributionAccount: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    editSubAccountPosition(
      _claimRewards: boolean,
      _subAccount: string,
      _FCPaddr: string,
      changeYield: BigNumberish,
      changeBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "editSubAccountPosition(bool,address,address,int256,int256)"(
      _claimRewards: boolean,
      _subAccount: string,
      _FCPaddr: string,
      changeYield: BigNumberish,
      changeBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "flashFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    flashLoanFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "flashLoanFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    forceClaimSubAccountRewards(
      _claimRewards: boolean,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forceClaimSubAccountRewards(bool,address,address,address)"(
      _claimRewards: boolean,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forceHarvest(overrides?: Overrides): Promise<ContractTransaction>;

    "forceHarvest()"(overrides?: Overrides): Promise<ContractTransaction>;

    forceRewardsCollection(overrides?: Overrides): Promise<ContractTransaction>;

    "forceRewardsCollection()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getStatus(overrides?: CallOverrides): Promise<{
      updateTimestamp: BigNumber;
      ratio: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getStatus()"(overrides?: CallOverrides): Promise<{
      updateTimestamp: BigNumber;
      ratio: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    harvestNonListedRewardAsset(
      _assetAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "harvestNonListedRewardAsset(address)"(
      _assetAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasClaimedAllYTRewards(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasClaimedAllYTRewards(address,address,address)"(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    immutableRewardsAssets(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "immutableRewardsAssets(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    infoOracleAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "infoOracleAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    isDistributionAccount(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isDistributionAccount(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    lastHarvest(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastHarvest()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lastUpdate(overrides?: CallOverrides): Promise<{
      timestamp: BigNumber;
      0: BigNumber;
    }>;

    "lastUpdate()"(overrides?: CallOverrides): Promise<{
      timestamp: BigNumber;
      0: BigNumber;
    }>;

    maxFlashLoan(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    name(overrides?: CallOverrides): Promise<{
      _name: string;
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      _name: string;
      0: string;
    }>;

    numRewardsAssets(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "numRewardsAssets()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    prevContractBalance(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "prevContractBalance(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    prevRatio(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "prevRatio()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    prevTotalRewardsPerWasset(
      _index: BigNumberish,
      _wassetHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "prevTotalRewardsPerWasset(uint256,address)"(
      _index: BigNumberish,
      _wassetHolder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    reactivateRewardAsset(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reactivateRewardAsset(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerAsDistributionAccount(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerAsDistributionAccount()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rewardsAssets(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "rewardsAssets(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setFlashLoanFee(
      _flashLoanFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFlashLoanFee(uint256)"(
      _flashLoanFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInterestFee(
      _SBPSRetained: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInterestFee(uint32)"(
      _SBPSRetained: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    subAccountPositions(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<{
      yield: BigNumber;
      bond: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "subAccountPositions(address,address,address)"(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<{
      yield: BigNumber;
      bond: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    subAccountPrevTotalReturnsPerWasset(
      _index: BigNumberish,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "subAccountPrevTotalReturnsPerWasset(uint256,address,address,address)"(
      _index: BigNumberish,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      _symbol: string;
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      _symbol: string;
      0: string;
    }>;

    totalRewardsPerWasset(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalRewardsPerWasset(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalRewardsPerWassetUponActivation(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalRewardsPerWassetUponActivation(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      supply: BigNumber;
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      supply: BigNumber;
      0: BigNumber;
    }>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlyingAssetAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "underlyingAssetAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    underlyingIsStatic(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "underlyingIsStatic()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    withdrawUnitAmount(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawUnitAmount(address,uint256,bool)"(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawWrappedAmount(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawWrappedAmount(address,uint256,bool)"(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  FCPDirectClaimSubAccountRewards(
    _inPayoutPhase: boolean,
    _claimRewards: boolean,
    _subAcct: string,
    _yield: BigNumberish,
    _wrappedClaim: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "FCPDirectClaimSubAccountRewards(bool,bool,address,uint256,uint256)"(
    _inPayoutPhase: boolean,
    _claimRewards: boolean,
    _subAcct: string,
    _yield: BigNumberish,
    _wrappedClaim: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  FCPDirectDoubleClaimSubAccountRewards(
    _inPayoutPhase: boolean,
    _claimRewards: boolean,
    _subAccts: [string, string],
    _yieldArr: [BigNumberish, BigNumberish],
    _wrappedClaims: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "FCPDirectDoubleClaimSubAccountRewards(bool,bool,address[2],uint256[2],uint256[2])"(
    _inPayoutPhase: boolean,
    _claimRewards: boolean,
    _subAccts: [string, string],
    _yieldArr: [BigNumberish, BigNumberish],
    _wrappedClaims: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  UnitAmtToWrappedAmt_RoundDown(
    _unitAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "UnitAmtToWrappedAmt_RoundDown(uint256)"(
    _unitAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  UnitAmtToWrappedAmt_RoundUp(
    _unitAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "UnitAmtToWrappedAmt_RoundUp(uint256)"(
    _unitAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  WrappedAmtToUnitAmt_RoundDown(
    _amountWrapped: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "WrappedAmtToUnitAmt_RoundDown(uint256)"(
    _amountWrapped: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  WrappedAmtToUnitAmt_RoundUp(
    _amountWrapped: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "WrappedAmtToUnitAmt_RoundUp(uint256)"(
    _amountWrapped: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addRewardAsset(
    _rewardsAsset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRewardAsset(address)"(
    _rewardsAsset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deactivateRewardAsset(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deactivateRewardAsset(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  delistDistributionAccount(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delistDistributionAccount()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositUnitAmount(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositUnitAmount(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositWrappedAmount(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositWrappedAmount(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  distributionAccountRewards(
    _index: BigNumberish,
    _distributionAccount: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "distributionAccountRewards(uint256,address)"(
    _index: BigNumberish,
    _distributionAccount: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  editSubAccountPosition(
    _claimRewards: boolean,
    _subAccount: string,
    _FCPaddr: string,
    changeYield: BigNumberish,
    changeBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "editSubAccountPosition(bool,address,address,int256,int256)"(
    _claimRewards: boolean,
    _subAccount: string,
    _FCPaddr: string,
    changeYield: BigNumberish,
    changeBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  flashFee(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "flashFee(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flashLoan(
    receiver: string,
    token: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flashLoan(address,address,uint256,bytes)"(
    receiver: string,
    token: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  flashLoanFee(overrides?: CallOverrides): Promise<BigNumber>;

  "flashLoanFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  forceClaimSubAccountRewards(
    _claimRewards: boolean,
    _distributionAccount: string,
    _subAccount: string,
    _FCPaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forceClaimSubAccountRewards(bool,address,address,address)"(
    _claimRewards: boolean,
    _distributionAccount: string,
    _subAccount: string,
    _FCPaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forceHarvest(overrides?: Overrides): Promise<ContractTransaction>;

  "forceHarvest()"(overrides?: Overrides): Promise<ContractTransaction>;

  forceRewardsCollection(overrides?: Overrides): Promise<ContractTransaction>;

  "forceRewardsCollection()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getStatus(overrides?: CallOverrides): Promise<{
    updateTimestamp: BigNumber;
    ratio: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getStatus()"(overrides?: CallOverrides): Promise<{
    updateTimestamp: BigNumber;
    ratio: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  harvestNonListedRewardAsset(
    _assetAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "harvestNonListedRewardAsset(address)"(
    _assetAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasClaimedAllYTRewards(
    _distributionAccount: string,
    _subAccount: string,
    _FCPaddr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasClaimedAllYTRewards(address,address,address)"(
    _distributionAccount: string,
    _subAccount: string,
    _FCPaddr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  immutableRewardsAssets(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "immutableRewardsAssets(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  infoOracleAddress(overrides?: CallOverrides): Promise<string>;

  "infoOracleAddress()"(overrides?: CallOverrides): Promise<string>;

  isDistributionAccount(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDistributionAccount(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

  "lastHarvest()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdate()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "maxFlashLoan(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  numRewardsAssets(overrides?: CallOverrides): Promise<BigNumber>;

  "numRewardsAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

  prevContractBalance(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "prevContractBalance(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prevRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "prevRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  prevTotalRewardsPerWasset(
    _index: BigNumberish,
    _wassetHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "prevTotalRewardsPerWasset(uint256,address)"(
    _index: BigNumberish,
    _wassetHolder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reactivateRewardAsset(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reactivateRewardAsset(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerAsDistributionAccount(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerAsDistributionAccount()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rewardsAssets(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "rewardsAssets(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setFlashLoanFee(
    _flashLoanFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFlashLoanFee(uint256)"(
    _flashLoanFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInterestFee(
    _SBPSRetained: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInterestFee(uint32)"(
    _SBPSRetained: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  subAccountPositions(
    _distributionAccount: string,
    _subAccount: string,
    _FCPaddr: string,
    overrides?: CallOverrides
  ): Promise<{
    yield: BigNumber;
    bond: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "subAccountPositions(address,address,address)"(
    _distributionAccount: string,
    _subAccount: string,
    _FCPaddr: string,
    overrides?: CallOverrides
  ): Promise<{
    yield: BigNumber;
    bond: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  subAccountPrevTotalReturnsPerWasset(
    _index: BigNumberish,
    _distributionAccount: string,
    _subAccount: string,
    _FCPaddr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "subAccountPrevTotalReturnsPerWasset(uint256,address,address,address)"(
    _index: BigNumberish,
    _distributionAccount: string,
    _subAccount: string,
    _FCPaddr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalRewardsPerWasset(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalRewardsPerWasset(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalRewardsPerWassetUponActivation(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalRewardsPerWassetUponActivation(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlyingAssetAddress(overrides?: CallOverrides): Promise<string>;

  "underlyingAssetAddress()"(overrides?: CallOverrides): Promise<string>;

  underlyingIsStatic(overrides?: CallOverrides): Promise<boolean>;

  "underlyingIsStatic()"(overrides?: CallOverrides): Promise<boolean>;

  withdrawUnitAmount(
    _to: string,
    _amount: BigNumberish,
    _claimRewards: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawUnitAmount(address,uint256,bool)"(
    _to: string,
    _amount: BigNumberish,
    _claimRewards: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawWrappedAmount(
    _to: string,
    _amount: BigNumberish,
    _claimRewards: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawWrappedAmount(address,uint256,bool)"(
    _to: string,
    _amount: BigNumberish,
    _claimRewards: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    FCPDirectClaimSubAccountRewards(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAcct: string,
      _yield: BigNumberish,
      _wrappedClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "FCPDirectClaimSubAccountRewards(bool,bool,address,uint256,uint256)"(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAcct: string,
      _yield: BigNumberish,
      _wrappedClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    FCPDirectDoubleClaimSubAccountRewards(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "FCPDirectDoubleClaimSubAccountRewards(bool,bool,address[2],uint256[2],uint256[2])"(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    UnitAmtToWrappedAmt_RoundDown(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "UnitAmtToWrappedAmt_RoundDown(uint256)"(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UnitAmtToWrappedAmt_RoundUp(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "UnitAmtToWrappedAmt_RoundUp(uint256)"(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WrappedAmtToUnitAmt_RoundDown(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "WrappedAmtToUnitAmt_RoundDown(uint256)"(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WrappedAmtToUnitAmt_RoundUp(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "WrappedAmtToUnitAmt_RoundUp(uint256)"(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addRewardAsset(
      _rewardsAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRewardAsset(address)"(
      _rewardsAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivateRewardAsset(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deactivateRewardAsset(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    delistDistributionAccount(overrides?: CallOverrides): Promise<void>;

    "delistDistributionAccount()"(overrides?: CallOverrides): Promise<void>;

    depositUnitAmount(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "depositUnitAmount(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositWrappedAmount(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "depositWrappedAmount(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributionAccountRewards(
      _index: BigNumberish,
      _distributionAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributionAccountRewards(uint256,address)"(
      _index: BigNumberish,
      _distributionAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    editSubAccountPosition(
      _claimRewards: boolean,
      _subAccount: string,
      _FCPaddr: string,
      changeYield: BigNumberish,
      changeBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "editSubAccountPosition(bool,address,address,int256,int256)"(
      _claimRewards: boolean,
      _subAccount: string,
      _FCPaddr: string,
      changeYield: BigNumberish,
      changeBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "flashFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    flashLoanFee(overrides?: CallOverrides): Promise<BigNumber>;

    "flashLoanFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    forceClaimSubAccountRewards(
      _claimRewards: boolean,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "forceClaimSubAccountRewards(bool,address,address,address)"(
      _claimRewards: boolean,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    forceHarvest(overrides?: CallOverrides): Promise<void>;

    "forceHarvest()"(overrides?: CallOverrides): Promise<void>;

    forceRewardsCollection(overrides?: CallOverrides): Promise<void>;

    "forceRewardsCollection()"(overrides?: CallOverrides): Promise<void>;

    getStatus(overrides?: CallOverrides): Promise<{
      updateTimestamp: BigNumber;
      ratio: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getStatus()"(overrides?: CallOverrides): Promise<{
      updateTimestamp: BigNumber;
      ratio: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    harvestNonListedRewardAsset(
      _assetAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "harvestNonListedRewardAsset(address)"(
      _assetAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasClaimedAllYTRewards(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasClaimedAllYTRewards(address,address,address)"(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    immutableRewardsAssets(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "immutableRewardsAssets(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    infoOracleAddress(overrides?: CallOverrides): Promise<string>;

    "infoOracleAddress()"(overrides?: CallOverrides): Promise<string>;

    isDistributionAccount(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDistributionAccount(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    "lastHarvest()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdate()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    numRewardsAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "numRewardsAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevContractBalance(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prevContractBalance(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "prevRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevTotalRewardsPerWasset(
      _index: BigNumberish,
      _wassetHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prevTotalRewardsPerWasset(uint256,address)"(
      _index: BigNumberish,
      _wassetHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reactivateRewardAsset(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "reactivateRewardAsset(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAsDistributionAccount(overrides?: CallOverrides): Promise<void>;

    "registerAsDistributionAccount()"(overrides?: CallOverrides): Promise<void>;

    rewardsAssets(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "rewardsAssets(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setFlashLoanFee(
      _flashLoanFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFlashLoanFee(uint256)"(
      _flashLoanFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestFee(
      _SBPSRetained: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestFee(uint32)"(
      _SBPSRetained: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    subAccountPositions(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<{
      yield: BigNumber;
      bond: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "subAccountPositions(address,address,address)"(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<{
      yield: BigNumber;
      bond: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    subAccountPrevTotalReturnsPerWasset(
      _index: BigNumberish,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subAccountPrevTotalReturnsPerWasset(uint256,address,address,address)"(
      _index: BigNumberish,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalRewardsPerWasset(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalRewardsPerWasset(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRewardsPerWassetUponActivation(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalRewardsPerWassetUponActivation(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    underlyingAssetAddress(overrides?: CallOverrides): Promise<string>;

    "underlyingAssetAddress()"(overrides?: CallOverrides): Promise<string>;

    underlyingIsStatic(overrides?: CallOverrides): Promise<boolean>;

    "underlyingIsStatic()"(overrides?: CallOverrides): Promise<boolean>;

    withdrawUnitAmount(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawUnitAmount(address,uint256,bool)"(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawWrappedAmount(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawWrappedAmount(address,uint256,bool)"(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(
      _owner: string | null,
      _spender: string | null,
      _value: null
    ): EventFilter;

    Deposit(to: string | null, wrappedAmount: null): EventFilter;

    FlashBurn(
      from: string | null,
      wrappedAmount: null,
      feeAmount: null
    ): EventFilter;

    FlashMint(to: string | null, wrappedAmount: null): EventFilter;

    Transfer(
      _from: string | null,
      _to: string | null,
      _value: null
    ): EventFilter;

    Withdrawal(from: string | null, wrappedAmount: null): EventFilter;
  };

  estimateGas: {
    FCPDirectClaimSubAccountRewards(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAcct: string,
      _yield: BigNumberish,
      _wrappedClaim: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "FCPDirectClaimSubAccountRewards(bool,bool,address,uint256,uint256)"(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAcct: string,
      _yield: BigNumberish,
      _wrappedClaim: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    FCPDirectDoubleClaimSubAccountRewards(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "FCPDirectDoubleClaimSubAccountRewards(bool,bool,address[2],uint256[2],uint256[2])"(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    UnitAmtToWrappedAmt_RoundDown(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "UnitAmtToWrappedAmt_RoundDown(uint256)"(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UnitAmtToWrappedAmt_RoundUp(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "UnitAmtToWrappedAmt_RoundUp(uint256)"(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WrappedAmtToUnitAmt_RoundDown(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "WrappedAmtToUnitAmt_RoundDown(uint256)"(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WrappedAmtToUnitAmt_RoundUp(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "WrappedAmtToUnitAmt_RoundUp(uint256)"(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addRewardAsset(
      _rewardsAsset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRewardAsset(address)"(
      _rewardsAsset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivateRewardAsset(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deactivateRewardAsset(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    delistDistributionAccount(overrides?: Overrides): Promise<BigNumber>;

    "delistDistributionAccount()"(overrides?: Overrides): Promise<BigNumber>;

    depositUnitAmount(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositUnitAmount(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositWrappedAmount(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositWrappedAmount(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    distributionAccountRewards(
      _index: BigNumberish,
      _distributionAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributionAccountRewards(uint256,address)"(
      _index: BigNumberish,
      _distributionAccount: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    editSubAccountPosition(
      _claimRewards: boolean,
      _subAccount: string,
      _FCPaddr: string,
      changeYield: BigNumberish,
      changeBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "editSubAccountPosition(bool,address,address,int256,int256)"(
      _claimRewards: boolean,
      _subAccount: string,
      _FCPaddr: string,
      changeYield: BigNumberish,
      changeBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "flashFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    flashLoanFee(overrides?: CallOverrides): Promise<BigNumber>;

    "flashLoanFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    forceClaimSubAccountRewards(
      _claimRewards: boolean,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "forceClaimSubAccountRewards(bool,address,address,address)"(
      _claimRewards: boolean,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forceHarvest(overrides?: Overrides): Promise<BigNumber>;

    "forceHarvest()"(overrides?: Overrides): Promise<BigNumber>;

    forceRewardsCollection(overrides?: Overrides): Promise<BigNumber>;

    "forceRewardsCollection()"(overrides?: Overrides): Promise<BigNumber>;

    getStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "getStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvestNonListedRewardAsset(
      _assetAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "harvestNonListedRewardAsset(address)"(
      _assetAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasClaimedAllYTRewards(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasClaimedAllYTRewards(address,address,address)"(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    immutableRewardsAssets(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "immutableRewardsAssets(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    infoOracleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "infoOracleAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    isDistributionAccount(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDistributionAccount(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastHarvest(overrides?: CallOverrides): Promise<BigNumber>;

    "lastHarvest()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdate()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxFlashLoan(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    numRewardsAssets(overrides?: CallOverrides): Promise<BigNumber>;

    "numRewardsAssets()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevContractBalance(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prevContractBalance(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "prevRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevTotalRewardsPerWasset(
      _index: BigNumberish,
      _wassetHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prevTotalRewardsPerWasset(uint256,address)"(
      _index: BigNumberish,
      _wassetHolder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reactivateRewardAsset(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reactivateRewardAsset(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerAsDistributionAccount(overrides?: Overrides): Promise<BigNumber>;

    "registerAsDistributionAccount()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    rewardsAssets(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardsAssets(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFlashLoanFee(
      _flashLoanFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFlashLoanFee(uint256)"(
      _flashLoanFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInterestFee(
      _SBPSRetained: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInterestFee(uint32)"(
      _SBPSRetained: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    subAccountPositions(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subAccountPositions(address,address,address)"(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subAccountPrevTotalReturnsPerWasset(
      _index: BigNumberish,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subAccountPrevTotalReturnsPerWasset(uint256,address,address,address)"(
      _index: BigNumberish,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardsPerWasset(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalRewardsPerWasset(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRewardsPerWassetUponActivation(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalRewardsPerWassetUponActivation(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlyingAssetAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingAssetAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingIsStatic(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingIsStatic()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawUnitAmount(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawUnitAmount(address,uint256,bool)"(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawWrappedAmount(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawWrappedAmount(address,uint256,bool)"(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FCPDirectClaimSubAccountRewards(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAcct: string,
      _yield: BigNumberish,
      _wrappedClaim: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "FCPDirectClaimSubAccountRewards(bool,bool,address,uint256,uint256)"(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAcct: string,
      _yield: BigNumberish,
      _wrappedClaim: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    FCPDirectDoubleClaimSubAccountRewards(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "FCPDirectDoubleClaimSubAccountRewards(bool,bool,address[2],uint256[2],uint256[2])"(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    UnitAmtToWrappedAmt_RoundDown(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "UnitAmtToWrappedAmt_RoundDown(uint256)"(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UnitAmtToWrappedAmt_RoundUp(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "UnitAmtToWrappedAmt_RoundUp(uint256)"(
      _unitAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WrappedAmtToUnitAmt_RoundDown(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "WrappedAmtToUnitAmt_RoundDown(uint256)"(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WrappedAmtToUnitAmt_RoundUp(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "WrappedAmtToUnitAmt_RoundUp(uint256)"(
      _amountWrapped: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addRewardAsset(
      _rewardsAsset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRewardAsset(address)"(
      _rewardsAsset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivateRewardAsset(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deactivateRewardAsset(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delistDistributionAccount(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delistDistributionAccount()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositUnitAmount(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositUnitAmount(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositWrappedAmount(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositWrappedAmount(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    distributionAccountRewards(
      _index: BigNumberish,
      _distributionAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributionAccountRewards(uint256,address)"(
      _index: BigNumberish,
      _distributionAccount: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    editSubAccountPosition(
      _claimRewards: boolean,
      _subAccount: string,
      _FCPaddr: string,
      changeYield: BigNumberish,
      changeBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "editSubAccountPosition(bool,address,address,int256,int256)"(
      _claimRewards: boolean,
      _subAccount: string,
      _FCPaddr: string,
      changeYield: BigNumberish,
      changeBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    flashFee(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "flashFee(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashLoan(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flashLoan(address,address,uint256,bytes)"(
      receiver: string,
      token: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    flashLoanFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "flashLoanFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forceClaimSubAccountRewards(
      _claimRewards: boolean,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forceClaimSubAccountRewards(bool,address,address,address)"(
      _claimRewards: boolean,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forceHarvest(overrides?: Overrides): Promise<PopulatedTransaction>;

    "forceHarvest()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    forceRewardsCollection(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forceRewardsCollection()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStatus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestNonListedRewardAsset(
      _assetAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "harvestNonListedRewardAsset(address)"(
      _assetAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasClaimedAllYTRewards(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasClaimedAllYTRewards(address,address,address)"(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    immutableRewardsAssets(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "immutableRewardsAssets(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    infoOracleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "infoOracleAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDistributionAccount(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDistributionAccount(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastHarvest(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastHarvest()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFlashLoan(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxFlashLoan(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numRewardsAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numRewardsAssets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prevContractBalance(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prevContractBalance(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prevRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "prevRatio()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevTotalRewardsPerWasset(
      _index: BigNumberish,
      _wassetHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prevTotalRewardsPerWasset(uint256,address)"(
      _index: BigNumberish,
      _wassetHolder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reactivateRewardAsset(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reactivateRewardAsset(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerAsDistributionAccount(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerAsDistributionAccount()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rewardsAssets(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardsAssets(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFlashLoanFee(
      _flashLoanFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFlashLoanFee(uint256)"(
      _flashLoanFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInterestFee(
      _SBPSRetained: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInterestFee(uint32)"(
      _SBPSRetained: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    subAccountPositions(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subAccountPositions(address,address,address)"(
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subAccountPrevTotalReturnsPerWasset(
      _index: BigNumberish,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subAccountPrevTotalReturnsPerWasset(uint256,address,address,address)"(
      _index: BigNumberish,
      _distributionAccount: string,
      _subAccount: string,
      _FCPaddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRewardsPerWasset(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalRewardsPerWasset(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewardsPerWassetUponActivation(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalRewardsPerWassetUponActivation(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlyingAssetAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "underlyingAssetAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingIsStatic(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "underlyingIsStatic()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawUnitAmount(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawUnitAmount(address,uint256,bool)"(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawWrappedAmount(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawWrappedAmount(address,uint256,bool)"(
      _to: string,
      _amount: BigNumberish,
      _claimRewards: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
