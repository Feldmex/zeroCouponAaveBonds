/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CTokenWrapperDelegate3Interface extends ethers.utils.Interface {
  functions: {
    "FCPDirectDoubleClaimSubAccountRewards(bool,bool,address[2],uint256[2],uint256[2])": FunctionFragment;
    "addRewardAsset(address)": FunctionFragment;
    "deactivateRewardAsset(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FCPDirectDoubleClaimSubAccountRewards",
    values: [
      boolean,
      boolean,
      [string, string],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateRewardAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "FCPDirectDoubleClaimSubAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateRewardAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "FlashBurn(address,uint256,uint256)": EventFragment;
    "FlashMint(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FlashBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashMint"): EventFragment;
}

export class CTokenWrapperDelegate3 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CTokenWrapperDelegate3Interface;

  functions: {
    FCPDirectDoubleClaimSubAccountRewards(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "FCPDirectDoubleClaimSubAccountRewards(bool,bool,address[2],uint256[2],uint256[2])"(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addRewardAsset(
      _rewardsAsset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRewardAsset(address)"(
      _rewardsAsset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deactivateRewardAsset(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deactivateRewardAsset(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  FCPDirectDoubleClaimSubAccountRewards(
    _inPayoutPhase: boolean,
    _claimRewards: boolean,
    _subAccts: [string, string],
    _yieldArr: [BigNumberish, BigNumberish],
    _wrappedClaims: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "FCPDirectDoubleClaimSubAccountRewards(bool,bool,address[2],uint256[2],uint256[2])"(
    _inPayoutPhase: boolean,
    _claimRewards: boolean,
    _subAccts: [string, string],
    _yieldArr: [BigNumberish, BigNumberish],
    _wrappedClaims: [BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addRewardAsset(
    _rewardsAsset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRewardAsset(address)"(
    _rewardsAsset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deactivateRewardAsset(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deactivateRewardAsset(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    FCPDirectDoubleClaimSubAccountRewards(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "FCPDirectDoubleClaimSubAccountRewards(bool,bool,address[2],uint256[2],uint256[2])"(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    addRewardAsset(
      _rewardsAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRewardAsset(address)"(
      _rewardsAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivateRewardAsset(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deactivateRewardAsset(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    FlashBurn(
      from: string | null,
      wrappedAmount: null,
      feeAmount: null
    ): EventFilter;

    FlashMint(to: string | null, wrappedAmount: null): EventFilter;
  };

  estimateGas: {
    FCPDirectDoubleClaimSubAccountRewards(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "FCPDirectDoubleClaimSubAccountRewards(bool,bool,address[2],uint256[2],uint256[2])"(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    addRewardAsset(
      _rewardsAsset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRewardAsset(address)"(
      _rewardsAsset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deactivateRewardAsset(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deactivateRewardAsset(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FCPDirectDoubleClaimSubAccountRewards(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "FCPDirectDoubleClaimSubAccountRewards(bool,bool,address[2],uint256[2],uint256[2])"(
      _inPayoutPhase: boolean,
      _claimRewards: boolean,
      _subAccts: [string, string],
      _yieldArr: [BigNumberish, BigNumberish],
      _wrappedClaims: [BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addRewardAsset(
      _rewardsAsset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRewardAsset(address)"(
      _rewardsAsset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deactivateRewardAsset(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deactivateRewardAsset(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
