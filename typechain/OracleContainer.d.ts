/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OracleContainerInterface extends ethers.utils.Interface {
  functions: {
    "AddAToken(address,string)": FunctionFragment;
    "AssetPhrase(address)": FunctionFragment;
    "BaseAggregatorAddress(string)": FunctionFragment;
    "addAggregators(address[])": FunctionFragment;
    "getAssetPrice(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "phraseToLatestPrice(string)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AddAToken",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "AssetPhrase", values: [string]): string;
  encodeFunctionData(
    functionFragment: "BaseAggregatorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addAggregators",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetPrice",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "phraseToLatestPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "AddAToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AssetPhrase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BaseAggregatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "phraseToLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {};
}

export class OracleContainer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OracleContainerInterface;

  functions: {
    AddAToken(
      _aTokenAddress: string,
      phrase: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "AddAToken(address,string)"(
      _aTokenAddress: string,
      phrase: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    AssetPhrase(
      _aTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      phrase: string;
      0: string;
    }>;

    "AssetPhrase(address)"(
      _aTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      phrase: string;
      0: string;
    }>;

    BaseAggregatorAddress(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      0: string;
    }>;

    "BaseAggregatorAddress(string)"(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<{
      addr: string;
      0: string;
    }>;

    addAggregators(
      _facades: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAggregators(address[])"(
      _facades: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAssetPrice(
      _assetAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getAssetPrice(address)"(
      _assetAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    phraseToLatestPrice(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<{
      spot: BigNumber;
      decimals: number;
      0: BigNumber;
      1: number;
    }>;

    "phraseToLatestPrice(string)"(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<{
      spot: BigNumber;
      decimals: number;
      0: BigNumber;
      1: number;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  AddAToken(
    _aTokenAddress: string,
    phrase: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "AddAToken(address,string)"(
    _aTokenAddress: string,
    phrase: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  AssetPhrase(
    _aTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "AssetPhrase(address)"(
    _aTokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  BaseAggregatorAddress(
    _phrase: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "BaseAggregatorAddress(string)"(
    _phrase: string,
    overrides?: CallOverrides
  ): Promise<string>;

  addAggregators(
    _facades: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAggregators(address[])"(
    _facades: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAssetPrice(
    _assetAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAssetPrice(address)"(
    _assetAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  phraseToLatestPrice(
    _phrase: string,
    overrides?: CallOverrides
  ): Promise<{
    spot: BigNumber;
    decimals: number;
    0: BigNumber;
    1: number;
  }>;

  "phraseToLatestPrice(string)"(
    _phrase: string,
    overrides?: CallOverrides
  ): Promise<{
    spot: BigNumber;
    decimals: number;
    0: BigNumber;
    1: number;
  }>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    AddAToken(
      _aTokenAddress: string,
      phrase: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "AddAToken(address,string)"(
      _aTokenAddress: string,
      phrase: string,
      overrides?: CallOverrides
    ): Promise<void>;

    AssetPhrase(
      _aTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "AssetPhrase(address)"(
      _aTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    BaseAggregatorAddress(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "BaseAggregatorAddress(string)"(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<string>;

    addAggregators(
      _facades: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addAggregators(address[])"(
      _facades: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetPrice(
      _assetAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAssetPrice(address)"(
      _assetAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    phraseToLatestPrice(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<{
      spot: BigNumber;
      decimals: number;
      0: BigNumber;
      1: number;
    }>;

    "phraseToLatestPrice(string)"(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<{
      spot: BigNumber;
      decimals: number;
      0: BigNumber;
      1: number;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    AddAToken(
      _aTokenAddress: string,
      phrase: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "AddAToken(address,string)"(
      _aTokenAddress: string,
      phrase: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    AssetPhrase(
      _aTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "AssetPhrase(address)"(
      _aTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BaseAggregatorAddress(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "BaseAggregatorAddress(string)"(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAggregators(
      _facades: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAggregators(address[])"(
      _facades: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAssetPrice(
      _assetAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAssetPrice(address)"(
      _assetAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    phraseToLatestPrice(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "phraseToLatestPrice(string)"(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AddAToken(
      _aTokenAddress: string,
      phrase: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "AddAToken(address,string)"(
      _aTokenAddress: string,
      phrase: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    AssetPhrase(
      _aTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "AssetPhrase(address)"(
      _aTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BaseAggregatorAddress(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "BaseAggregatorAddress(string)"(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAggregators(
      _facades: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAggregators(address[])"(
      _facades: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAssetPrice(
      _assetAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAssetPrice(address)"(
      _assetAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    phraseToLatestPrice(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "phraseToLatestPrice(string)"(
      _phrase: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
