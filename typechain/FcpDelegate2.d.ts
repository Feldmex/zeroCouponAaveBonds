/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FcpDelegate2Interface extends ethers.utils.Interface {
  functions: {
    "burnZCBFrom(address,uint256)": FunctionFragment;
    "depositWrappedToken(address,uint256)": FunctionFragment;
    "enterPayoutPhase()": FunctionFragment;
    "flashLoan(address,uint256,int256,bytes)": FunctionFragment;
    "mintZCBTo(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address,uint256,bool)": FunctionFragment;
    "withdrawAll(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnZCBFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWrappedToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterPayoutPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintZCBTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "burnZCBFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWrappedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterPayoutPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintZCBTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "BalanceUpdate(address,uint256,int256)": EventFragment;
    "BondBalanceUpdate(address,int256)": EventFragment;
    "ClaimPayout(address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BalanceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BondBalanceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimPayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class FcpDelegate2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FcpDelegate2Interface;

  functions: {
    burnZCBFrom(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnZCBFrom(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositWrappedToken(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositWrappedToken(address,uint256)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enterPayoutPhase(overrides?: Overrides): Promise<ContractTransaction>;

    "enterPayoutPhase()"(overrides?: Overrides): Promise<ContractTransaction>;

    flashLoan(
      _receiver: string,
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flashLoan(address,uint256,int256,bytes)"(
      _receiver: string,
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintZCBTo(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintZCBTo(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,bool)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAll(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAll(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  burnZCBFrom(
    _owner: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnZCBFrom(address,uint256)"(
    _owner: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositWrappedToken(
    _to: string,
    _amountWrappedTkn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositWrappedToken(address,uint256)"(
    _to: string,
    _amountWrappedTkn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enterPayoutPhase(overrides?: Overrides): Promise<ContractTransaction>;

  "enterPayoutPhase()"(overrides?: Overrides): Promise<ContractTransaction>;

  flashLoan(
    _receiver: string,
    _amountYield: BigNumberish,
    _amountBond: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flashLoan(address,uint256,int256,bytes)"(
    _receiver: string,
    _amountYield: BigNumberish,
    _amountBond: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintZCBTo(
    _owner: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintZCBTo(address,uint256)"(
    _owner: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _to: string,
    _amountWrappedTkn: BigNumberish,
    _unwrap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,bool)"(
    _to: string,
    _amountWrappedTkn: BigNumberish,
    _unwrap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAll(
    _to: string,
    _unwrap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAll(address,bool)"(
    _to: string,
    _unwrap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    burnZCBFrom(
      _owner: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnZCBFrom(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWrappedToken(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositWrappedToken(address,uint256)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterPayoutPhase(overrides?: CallOverrides): Promise<void>;

    "enterPayoutPhase()"(overrides?: CallOverrides): Promise<void>;

    flashLoan(
      _receiver: string,
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "flashLoan(address,uint256,int256,bytes)"(
      _receiver: string,
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintZCBTo(
      _owner: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintZCBTo(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256,bool)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(
      _to: string,
      _unwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAll(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BalanceUpdate(
      owner: string | null,
      newYield: null,
      newBond: null
    ): EventFilter;

    BondBalanceUpdate(owner: string | null, newBond: null): EventFilter;

    ClaimPayout(owner: string | null): EventFilter;

    Deposit(to: string | null, wrappedAmountDeposited: null): EventFilter;

    Withdrawal(from: string | null, wrappedAmountWithdrawn: null): EventFilter;
  };

  estimateGas: {
    burnZCBFrom(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnZCBFrom(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositWrappedToken(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositWrappedToken(address,uint256)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enterPayoutPhase(overrides?: Overrides): Promise<BigNumber>;

    "enterPayoutPhase()"(overrides?: Overrides): Promise<BigNumber>;

    flashLoan(
      _receiver: string,
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "flashLoan(address,uint256,int256,bytes)"(
      _receiver: string,
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintZCBTo(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintZCBTo(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,bool)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAll(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawAll(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnZCBFrom(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnZCBFrom(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositWrappedToken(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositWrappedToken(address,uint256)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enterPayoutPhase(overrides?: Overrides): Promise<PopulatedTransaction>;

    "enterPayoutPhase()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    flashLoan(
      _receiver: string,
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flashLoan(address,uint256,int256,bytes)"(
      _receiver: string,
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintZCBTo(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintZCBTo(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,bool)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAll(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
