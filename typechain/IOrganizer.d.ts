/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IOrganizerInterface extends ethers.utils.Interface {
  functions: {
    "DeploySwapRouter()": FunctionFragment;
    "FixCapitalPoolDeployerAddress()": FunctionFragment;
    "InfoOracleAddress()": FunctionFragment;
    "NGBwrapperDeployerAddress()": FunctionFragment;
    "OrderbookDeployerAddress()": FunctionFragment;
    "Orderbooks(address)": FunctionFragment;
    "QuickDepositorAddress()": FunctionFragment;
    "SwapRouterAddress()": FunctionFragment;
    "YTammDeployerAddress()": FunctionFragment;
    "YTamms(address)": FunctionFragment;
    "ZCB_YT_DeployerAddress()": FunctionFragment;
    "ZCBammDeployerAddress()": FunctionFragment;
    "ZCBamms(address)": FunctionFragment;
    "deployFixCapitalPoolInstance(address,uint40)": FunctionFragment;
    "deployNGBWrapper(address)": FunctionFragment;
    "deployOrderbook(address)": FunctionFragment;
    "deployYTamm(address)": FunctionFragment;
    "deployZCBamm(address)": FunctionFragment;
    "fixCapitalPoolToWrapper(address)": FunctionFragment;
    "setVerified(address,bool)": FunctionFragment;
    "wrapperIsVerified(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DeploySwapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FixCapitalPoolDeployerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "InfoOracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NGBwrapperDeployerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OrderbookDeployerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Orderbooks", values: [string]): string;
  encodeFunctionData(
    functionFragment: "QuickDepositorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SwapRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "YTammDeployerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "YTamms", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ZCB_YT_DeployerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZCBammDeployerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ZCBamms", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deployFixCapitalPoolInstance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNGBWrapper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployOrderbook",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "deployYTamm", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deployZCBamm",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fixCapitalPoolToWrapper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerified",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapperIsVerified",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DeploySwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FixCapitalPoolDeployerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "InfoOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NGBwrapperDeployerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OrderbookDeployerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Orderbooks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "QuickDepositorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SwapRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "YTammDeployerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "YTamms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ZCB_YT_DeployerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ZCBammDeployerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZCBamms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployFixCapitalPoolInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployNGBWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployOrderbook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployYTamm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployZCBamm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fixCapitalPoolToWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapperIsVerified",
    data: BytesLike
  ): Result;

  events: {
    "FixCapitalPoolDeployment(address,address,address,uint40)": EventFragment;
    "OrderbookDeployment(address,address)": EventFragment;
    "WrapperDeployment(address,address,address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FixCapitalPoolDeployment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderbookDeployment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WrapperDeployment"): EventFragment;
}

export class IOrganizer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IOrganizerInterface;

  functions: {
    DeploySwapRouter(overrides?: Overrides): Promise<ContractTransaction>;

    "DeploySwapRouter()"(overrides?: Overrides): Promise<ContractTransaction>;

    FixCapitalPoolDeployerAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "FixCapitalPoolDeployerAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    InfoOracleAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "InfoOracleAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    NGBwrapperDeployerAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "NGBwrapperDeployerAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    OrderbookDeployerAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "OrderbookDeployerAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    Orderbooks(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<{
      OrderbookAddress: string;
      0: string;
    }>;

    "Orderbooks(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<{
      OrderbookAddress: string;
      0: string;
    }>;

    QuickDepositorAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "QuickDepositorAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    SwapRouterAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "SwapRouterAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    YTammDeployerAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "YTammDeployerAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    YTamms(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<{
      YTammAddress: string;
      0: string;
    }>;

    "YTamms(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<{
      YTammAddress: string;
      0: string;
    }>;

    ZCB_YT_DeployerAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ZCB_YT_DeployerAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ZCBammDeployerAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ZCBammDeployerAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ZCBamms(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<{
      ZCBammAddress: string;
      0: string;
    }>;

    "ZCBamms(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<{
      ZCBammAddress: string;
      0: string;
    }>;

    deployFixCapitalPoolInstance(
      _wrapperAddress: string,
      _maturity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployFixCapitalPoolInstance(address,uint40)"(
      _wrapperAddress: string,
      _maturity: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployNGBWrapper(
      _underlyingAssetAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployNGBWrapper(address)"(
      _underlyingAssetAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployOrderbook(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployOrderbook(address)"(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployYTamm(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployYTamm(address)"(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deployZCBamm(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deployZCBamm(address)"(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fixCapitalPoolToWrapper(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<{
      wrapperAddress: string;
      0: string;
    }>;

    "fixCapitalPoolToWrapper(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<{
      wrapperAddress: string;
      0: string;
    }>;

    setVerified(
      _wrapperAddress: string,
      _setTo: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVerified(address,bool)"(
      _wrapperAddress: string,
      _setTo: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    wrapperIsVerified(
      _wrapperAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      isVerified: boolean;
      0: boolean;
    }>;

    "wrapperIsVerified(address)"(
      _wrapperAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      isVerified: boolean;
      0: boolean;
    }>;
  };

  DeploySwapRouter(overrides?: Overrides): Promise<ContractTransaction>;

  "DeploySwapRouter()"(overrides?: Overrides): Promise<ContractTransaction>;

  FixCapitalPoolDeployerAddress(overrides?: CallOverrides): Promise<string>;

  "FixCapitalPoolDeployerAddress()"(overrides?: CallOverrides): Promise<string>;

  InfoOracleAddress(overrides?: CallOverrides): Promise<string>;

  "InfoOracleAddress()"(overrides?: CallOverrides): Promise<string>;

  NGBwrapperDeployerAddress(overrides?: CallOverrides): Promise<string>;

  "NGBwrapperDeployerAddress()"(overrides?: CallOverrides): Promise<string>;

  OrderbookDeployerAddress(overrides?: CallOverrides): Promise<string>;

  "OrderbookDeployerAddress()"(overrides?: CallOverrides): Promise<string>;

  Orderbooks(_FCPaddress: string, overrides?: CallOverrides): Promise<string>;

  "Orderbooks(address)"(
    _FCPaddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  QuickDepositorAddress(overrides?: CallOverrides): Promise<string>;

  "QuickDepositorAddress()"(overrides?: CallOverrides): Promise<string>;

  SwapRouterAddress(overrides?: CallOverrides): Promise<string>;

  "SwapRouterAddress()"(overrides?: CallOverrides): Promise<string>;

  YTammDeployerAddress(overrides?: CallOverrides): Promise<string>;

  "YTammDeployerAddress()"(overrides?: CallOverrides): Promise<string>;

  YTamms(_FCPaddress: string, overrides?: CallOverrides): Promise<string>;

  "YTamms(address)"(
    _FCPaddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  ZCB_YT_DeployerAddress(overrides?: CallOverrides): Promise<string>;

  "ZCB_YT_DeployerAddress()"(overrides?: CallOverrides): Promise<string>;

  ZCBammDeployerAddress(overrides?: CallOverrides): Promise<string>;

  "ZCBammDeployerAddress()"(overrides?: CallOverrides): Promise<string>;

  ZCBamms(_FCPaddress: string, overrides?: CallOverrides): Promise<string>;

  "ZCBamms(address)"(
    _FCPaddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  deployFixCapitalPoolInstance(
    _wrapperAddress: string,
    _maturity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployFixCapitalPoolInstance(address,uint40)"(
    _wrapperAddress: string,
    _maturity: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployNGBWrapper(
    _underlyingAssetAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployNGBWrapper(address)"(
    _underlyingAssetAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployOrderbook(
    _fixCapitalPoolAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployOrderbook(address)"(
    _fixCapitalPoolAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployYTamm(
    _fixCapitalPoolAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployYTamm(address)"(
    _fixCapitalPoolAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deployZCBamm(
    _fixCapitalPoolAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deployZCBamm(address)"(
    _fixCapitalPoolAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fixCapitalPoolToWrapper(
    _FCPaddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "fixCapitalPoolToWrapper(address)"(
    _FCPaddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setVerified(
    _wrapperAddress: string,
    _setTo: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVerified(address,bool)"(
    _wrapperAddress: string,
    _setTo: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  wrapperIsVerified(
    _wrapperAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "wrapperIsVerified(address)"(
    _wrapperAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    DeploySwapRouter(overrides?: CallOverrides): Promise<void>;

    "DeploySwapRouter()"(overrides?: CallOverrides): Promise<void>;

    FixCapitalPoolDeployerAddress(overrides?: CallOverrides): Promise<string>;

    "FixCapitalPoolDeployerAddress()"(
      overrides?: CallOverrides
    ): Promise<string>;

    InfoOracleAddress(overrides?: CallOverrides): Promise<string>;

    "InfoOracleAddress()"(overrides?: CallOverrides): Promise<string>;

    NGBwrapperDeployerAddress(overrides?: CallOverrides): Promise<string>;

    "NGBwrapperDeployerAddress()"(overrides?: CallOverrides): Promise<string>;

    OrderbookDeployerAddress(overrides?: CallOverrides): Promise<string>;

    "OrderbookDeployerAddress()"(overrides?: CallOverrides): Promise<string>;

    Orderbooks(_FCPaddress: string, overrides?: CallOverrides): Promise<string>;

    "Orderbooks(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    QuickDepositorAddress(overrides?: CallOverrides): Promise<string>;

    "QuickDepositorAddress()"(overrides?: CallOverrides): Promise<string>;

    SwapRouterAddress(overrides?: CallOverrides): Promise<string>;

    "SwapRouterAddress()"(overrides?: CallOverrides): Promise<string>;

    YTammDeployerAddress(overrides?: CallOverrides): Promise<string>;

    "YTammDeployerAddress()"(overrides?: CallOverrides): Promise<string>;

    YTamms(_FCPaddress: string, overrides?: CallOverrides): Promise<string>;

    "YTamms(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    ZCB_YT_DeployerAddress(overrides?: CallOverrides): Promise<string>;

    "ZCB_YT_DeployerAddress()"(overrides?: CallOverrides): Promise<string>;

    ZCBammDeployerAddress(overrides?: CallOverrides): Promise<string>;

    "ZCBammDeployerAddress()"(overrides?: CallOverrides): Promise<string>;

    ZCBamms(_FCPaddress: string, overrides?: CallOverrides): Promise<string>;

    "ZCBamms(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    deployFixCapitalPoolInstance(
      _wrapperAddress: string,
      _maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployFixCapitalPoolInstance(address,uint40)"(
      _wrapperAddress: string,
      _maturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployNGBWrapper(
      _underlyingAssetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployNGBWrapper(address)"(
      _underlyingAssetAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployOrderbook(
      _fixCapitalPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployOrderbook(address)"(
      _fixCapitalPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployYTamm(
      _fixCapitalPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployYTamm(address)"(
      _fixCapitalPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployZCBamm(
      _fixCapitalPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "deployZCBamm(address)"(
      _fixCapitalPoolAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fixCapitalPoolToWrapper(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "fixCapitalPoolToWrapper(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setVerified(
      _wrapperAddress: string,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVerified(address,bool)"(
      _wrapperAddress: string,
      _setTo: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapperIsVerified(
      _wrapperAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "wrapperIsVerified(address)"(
      _wrapperAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    FixCapitalPoolDeployment(
      FCPaddress: string | null,
      BaseWrapperAddress: string | null,
      owner: string | null,
      maturity: null
    ): EventFilter;

    OrderbookDeployment(
      OrderbookAddress: string | null,
      BaseFCPaddress: string | null
    ): EventFilter;

    WrapperDeployment(
      wrapperAddress: string | null,
      underlyingAddress: string | null,
      owner: string | null,
      wrapperType: null
    ): EventFilter;
  };

  estimateGas: {
    DeploySwapRouter(overrides?: Overrides): Promise<BigNumber>;

    "DeploySwapRouter()"(overrides?: Overrides): Promise<BigNumber>;

    FixCapitalPoolDeployerAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "FixCapitalPoolDeployerAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    InfoOracleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "InfoOracleAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    NGBwrapperDeployerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "NGBwrapperDeployerAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OrderbookDeployerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "OrderbookDeployerAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    Orderbooks(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "Orderbooks(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    QuickDepositorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "QuickDepositorAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    SwapRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "SwapRouterAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    YTammDeployerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "YTammDeployerAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    YTamms(_FCPaddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    "YTamms(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ZCB_YT_DeployerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "ZCB_YT_DeployerAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    ZCBammDeployerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "ZCBammDeployerAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    ZCBamms(_FCPaddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ZCBamms(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployFixCapitalPoolInstance(
      _wrapperAddress: string,
      _maturity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployFixCapitalPoolInstance(address,uint40)"(
      _wrapperAddress: string,
      _maturity: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployNGBWrapper(
      _underlyingAssetAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployNGBWrapper(address)"(
      _underlyingAssetAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployOrderbook(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployOrderbook(address)"(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployYTamm(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployYTamm(address)"(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deployZCBamm(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deployZCBamm(address)"(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fixCapitalPoolToWrapper(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "fixCapitalPoolToWrapper(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setVerified(
      _wrapperAddress: string,
      _setTo: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVerified(address,bool)"(
      _wrapperAddress: string,
      _setTo: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    wrapperIsVerified(
      _wrapperAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wrapperIsVerified(address)"(
      _wrapperAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DeploySwapRouter(overrides?: Overrides): Promise<PopulatedTransaction>;

    "DeploySwapRouter()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    FixCapitalPoolDeployerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "FixCapitalPoolDeployerAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    InfoOracleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "InfoOracleAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NGBwrapperDeployerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "NGBwrapperDeployerAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OrderbookDeployerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "OrderbookDeployerAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    Orderbooks(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "Orderbooks(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    QuickDepositorAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "QuickDepositorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SwapRouterAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SwapRouterAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    YTammDeployerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "YTammDeployerAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    YTamms(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "YTamms(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZCB_YT_DeployerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ZCB_YT_DeployerAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZCBammDeployerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ZCBammDeployerAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZCBamms(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ZCBamms(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployFixCapitalPoolInstance(
      _wrapperAddress: string,
      _maturity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployFixCapitalPoolInstance(address,uint40)"(
      _wrapperAddress: string,
      _maturity: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployNGBWrapper(
      _underlyingAssetAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployNGBWrapper(address)"(
      _underlyingAssetAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployOrderbook(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployOrderbook(address)"(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployYTamm(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployYTamm(address)"(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deployZCBamm(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deployZCBamm(address)"(
      _fixCapitalPoolAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fixCapitalPoolToWrapper(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fixCapitalPoolToWrapper(address)"(
      _FCPaddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setVerified(
      _wrapperAddress: string,
      _setTo: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVerified(address,bool)"(
      _wrapperAddress: string,
      _setTo: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    wrapperIsVerified(
      _wrapperAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wrapperIsVerified(address)"(
      _wrapperAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
