/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DbsfVaultFactoryDelegate5Interface extends ethers.utils.Interface {
  functions: {
    "claimRebate(address)": FunctionFragment;
    "claimRevenue(address)": FunctionFragment;
    "claimYTRebate(address)": FunctionFragment;
    "claimYTRevenue(address,int256)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferVault(uint256,address,bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claimRebate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimRevenue",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimYTRebate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimYTRevenue",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferVault",
    values: [BigNumberish, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimYTRebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimYTRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVault",
    data: BytesLike
  ): Result;

  events: {};
}

export class DbsfVaultFactoryDelegate5 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DbsfVaultFactoryDelegate5Interface;

  functions: {
    claimRebate(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimRebate(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimRevenue(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimRevenue(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimYTRebate(
      _FCP: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimYTRebate(address)"(
      _FCP: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimYTRevenue(
      _FCP: string,
      _bondIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimYTRevenue(address,int256)"(
      _FCP: string,
      _bondIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferVault(
      _index: BigNumberish,
      _to: string,
      _isYTVault: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferVault(uint256,address,bool)"(
      _index: BigNumberish,
      _to: string,
      _isYTVault: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  claimRebate(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimRebate(address)"(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimRevenue(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimRevenue(address)"(
    _asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimYTRebate(
    _FCP: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimYTRebate(address)"(
    _FCP: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimYTRevenue(
    _FCP: string,
    _bondIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimYTRevenue(address,int256)"(
    _FCP: string,
    _bondIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferVault(
    _index: BigNumberish,
    _to: string,
    _isYTVault: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferVault(uint256,address,bool)"(
    _index: BigNumberish,
    _to: string,
    _isYTVault: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRebate(_asset: string, overrides?: CallOverrides): Promise<void>;

    "claimRebate(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRevenue(_asset: string, overrides?: CallOverrides): Promise<void>;

    "claimRevenue(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimYTRebate(_FCP: string, overrides?: CallOverrides): Promise<void>;

    "claimYTRebate(address)"(
      _FCP: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimYTRevenue(
      _FCP: string,
      _bondIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimYTRevenue(address,int256)"(
      _FCP: string,
      _bondIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferVault(
      _index: BigNumberish,
      _to: string,
      _isYTVault: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferVault(uint256,address,bool)"(
      _index: BigNumberish,
      _to: string,
      _isYTVault: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    claimRebate(_asset: string, overrides?: Overrides): Promise<BigNumber>;

    "claimRebate(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimRevenue(_asset: string, overrides?: Overrides): Promise<BigNumber>;

    "claimRevenue(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimYTRebate(_FCP: string, overrides?: Overrides): Promise<BigNumber>;

    "claimYTRebate(address)"(
      _FCP: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimYTRevenue(
      _FCP: string,
      _bondIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimYTRevenue(address,int256)"(
      _FCP: string,
      _bondIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferVault(
      _index: BigNumberish,
      _to: string,
      _isYTVault: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferVault(uint256,address,bool)"(
      _index: BigNumberish,
      _to: string,
      _isYTVault: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRebate(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimRebate(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimRevenue(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimRevenue(address)"(
      _asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimYTRebate(
      _FCP: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimYTRebate(address)"(
      _FCP: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimYTRevenue(
      _FCP: string,
      _bondIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimYTRevenue(address,int256)"(
      _FCP: string,
      _bondIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferVault(
      _index: BigNumberish,
      _to: string,
      _isYTVault: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferVault(uint256,address,bool)"(
      _index: BigNumberish,
      _to: string,
      _isYTVault: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
