/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FcpDelegate1Interface extends ethers.utils.Interface {
  functions: {
    "claimBondPayout(address,bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferPosition(address,uint256,int256)": FunctionFragment;
    "transferPositionFrom(address,address,uint256,int256)": FunctionFragment;
    "transferYT(address,address,uint256)": FunctionFragment;
    "transferZCB(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimBondPayout",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPosition",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPositionFrom",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferYT",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferZCB",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimBondPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPositionFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferYT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferZCB",
    data: BytesLike
  ): Result;

  events: {
    "BalanceUpdate(address,uint256,int256)": EventFragment;
    "BondBalanceUpdate(address,int256)": EventFragment;
    "ClaimPayout(address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BalanceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BondBalanceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimPayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class FcpDelegate1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FcpDelegate1Interface;

  functions: {
    claimBondPayout(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimBondPayout(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferPosition(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferPosition(address,uint256,int256)"(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferPositionFrom(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferPositionFrom(address,address,uint256,int256)"(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferYT(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferYT(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferZCB(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferZCB(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  claimBondPayout(
    _to: string,
    _unwrap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimBondPayout(address,bool)"(
    _to: string,
    _unwrap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferPosition(
    _to: string,
    _yield: BigNumberish,
    _bond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferPosition(address,uint256,int256)"(
    _to: string,
    _yield: BigNumberish,
    _bond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferPositionFrom(
    _from: string,
    _to: string,
    _yield: BigNumberish,
    _bond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferPositionFrom(address,address,uint256,int256)"(
    _from: string,
    _to: string,
    _yield: BigNumberish,
    _bond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferYT(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferYT(address,address,uint256)"(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferZCB(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferZCB(address,address,uint256)"(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    claimBondPayout(
      _to: string,
      _unwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimBondPayout(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPosition(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferPosition(address,uint256,int256)"(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPositionFrom(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferPositionFrom(address,address,uint256,int256)"(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferYT(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferYT(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferZCB(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferZCB(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BalanceUpdate(
      owner: string | null,
      newYield: null,
      newBond: null
    ): EventFilter;

    BondBalanceUpdate(owner: string | null, newBond: null): EventFilter;

    ClaimPayout(owner: string | null): EventFilter;

    Deposit(to: string | null, wrappedAmountDeposited: null): EventFilter;

    Withdrawal(from: string | null, wrappedAmountWithdrawn: null): EventFilter;
  };

  estimateGas: {
    claimBondPayout(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimBondPayout(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferPosition(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferPosition(address,uint256,int256)"(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferPositionFrom(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferPositionFrom(address,address,uint256,int256)"(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferYT(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferYT(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferZCB(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferZCB(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimBondPayout(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimBondPayout(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferPosition(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferPosition(address,uint256,int256)"(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferPositionFrom(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferPositionFrom(address,address,uint256,int256)"(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferYT(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferYT(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferZCB(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferZCB(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
