/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, BigNumberish } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { DummyAggregator } from "./DummyAggregator";

export class DummyAggregatorFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _decimals: BigNumberish,
    _description: string,
    overrides?: Overrides
  ): Promise<DummyAggregator> {
    return super.deploy(
      _decimals,
      _description,
      overrides || {}
    ) as Promise<DummyAggregator>;
  }
  getDeployTransaction(
    _decimals: BigNumberish,
    _description: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_decimals, _description, overrides || {});
  }
  attach(address: string): DummyAggregator {
    return super.attach(address) as DummyAggregator;
  }
  connect(signer: Signer): DummyAggregatorFactory {
    return super.connect(signer) as DummyAggregatorFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyAggregator {
    return new Contract(address, _abi, signerOrProvider) as DummyAggregator;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
    ],
    name: "addRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_roundId",
        type: "uint256",
      },
    ],
    name: "getAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_roundId",
        type: "uint256",
      },
    ],
    name: "getTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161061c38038061061c8339818101604052604081101561003357600080fd5b81019080805190602001909291908051604051939291908464010000000082111561005d57600080fd5b8382019150602082018581111561007357600080fd5b825186600182028301116401000000008211171561009057600080fd5b8083526020830192505050908051906020019080838360005b838110156100c45780820151818401526020810190506100a9565b50505050905090810190601f1680156100f15780820380516001836020036101000a031916815260200191505b50604052505050816000806101000a81548160ff021916908360ff1602179055508060029080519060200190610128929190610187565b50600160405180604001604052806000815260200142815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000155602082015181600101555050505061022c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101c857805160ff19168380011785556101f6565b828001600101855582156101f6579182015b828111156101f55782518255916020019190600101906101da565b5b5090506102039190610207565b5090565b61022991905b8082111561022557600081600090555060010161020d565b5090565b90565b6103e18061023b6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063668a0f021161005b578063668a0f02146100f25780637284e41614610110578063b5ab58dc14610193578063b633620c146101d55761007d565b8063313ce5671461008257806350d25bcd146100a657806351f15c4f146100c4575b600080fd5b61008a610217565b604051808260ff1660ff16815260200191505060405180910390f35b6100ae610229565b6040518082815260200191505060405180910390f35b6100f0600480360360208110156100da57600080fd5b8101908080359060200190929190505050610255565b005b6100fa6102ae565b6040518082815260200191505060405180910390f35b6101186102bd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015857808201518184015260208101905061013d565b50505050905090810190601f1680156101855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101bf600480360360208110156101a957600080fd5b810190808035906020019092919050505061035b565b6040518082815260200191505060405180910390f35b610201600480360360208110156101eb57600080fd5b8101908080359060200190929190505050610383565b6040518082815260200191505060405180910390f35b6000809054906101000a900460ff1681565b60006001808080549050038154811061023e57fe5b906000526020600020906002020160000154905090565b600160405180604001604052808381526020014281525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505050565b60006001808054905003905090565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103535780601f1061032857610100808354040283529160200191610353565b820191906000526020600020905b81548152906001019060200180831161033657829003601f168201915b505050505081565b60006001828154811061036a57fe5b9060005260206000209060020201600001549050919050565b60006001828154811061039257fe5b906000526020600020906002020160010154905091905056fea2646970667358221220096af35210b5c515a620231ecfebcd35753129cb205bff4645ac08dee7d25e8064736f6c63430006080033";
