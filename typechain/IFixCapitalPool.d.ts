/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IFixCapitalPoolInterface extends ethers.utils.Interface {
  functions: {
    "TotalRewardsPerWassetAtMaturity(uint256)": FunctionFragment;
    "balanceBonds(address)": FunctionFragment;
    "balanceYield(address)": FunctionFragment;
    "burnZCBFrom(address,uint256)": FunctionFragment;
    "claimBondPayout(address,bool)": FunctionFragment;
    "currentConversionRate()": FunctionFragment;
    "depositWrappedToken(address,uint256)": FunctionFragment;
    "dualApprove(address,uint256,uint256)": FunctionFragment;
    "enterPayoutPhase()": FunctionFragment;
    "finalize()": FunctionFragment;
    "flashFee(uint256,int256)": FunctionFragment;
    "flashLoan(address,uint256,int256,bytes)": FunctionFragment;
    "inPayoutPhase()": FunctionFragment;
    "infoOracleAddress()": FunctionFragment;
    "isFinalized()": FunctionFragment;
    "lastUpdate()": FunctionFragment;
    "maturity()": FunctionFragment;
    "maturityConversionRate()": FunctionFragment;
    "maxFlashLoan()": FunctionFragment;
    "mintZCBTo(address,uint256)": FunctionFragment;
    "setVaultFactoryAddress(address)": FunctionFragment;
    "totalBalanceZCB(address)": FunctionFragment;
    "transferPosition(address,uint256,int256)": FunctionFragment;
    "transferPositionFrom(address,address,uint256,int256)": FunctionFragment;
    "transferYT(address,address,uint256)": FunctionFragment;
    "transferZCB(address,address,uint256)": FunctionFragment;
    "underlyingAssetAddress()": FunctionFragment;
    "whitelistedVaultFactories(address)": FunctionFragment;
    "withdraw(address,uint256,bool)": FunctionFragment;
    "withdrawAll(address,bool)": FunctionFragment;
    "wrappedTokenFree(address)": FunctionFragment;
    "wrapper()": FunctionFragment;
    "yieldTokenAddress()": FunctionFragment;
    "zeroCouponBondAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TotalRewardsPerWassetAtMaturity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceBonds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceYield",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "burnZCBFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBondPayout",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "currentConversionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositWrappedToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dualApprove",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterPayoutPhase",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flashFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inPayoutPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "infoOracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maturity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maturityConversionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFlashLoan",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintZCBTo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultFactoryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalanceZCB",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPosition",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPositionFrom",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferYT",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferZCB",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAssetAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedVaultFactories",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedTokenFree",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "wrapper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yieldTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zeroCouponBondAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "TotalRewardsPerWassetAtMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnZCBFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBondPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentConversionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWrappedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dualApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterPayoutPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inPayoutPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "infoOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maturity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maturityConversionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintZCBTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVaultFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalanceZCB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPositionFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transferYT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferZCB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAssetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedVaultFactories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedTokenFree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wrapper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "yieldTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zeroCouponBondAddress",
    data: BytesLike
  ): Result;

  events: {
    "BalanceUpdate(address,uint256,int256)": EventFragment;
    "BondBalanceUpdate(address,int256)": EventFragment;
    "ClaimPayout(address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Withdrawal(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BalanceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BondBalanceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimPayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class IFixCapitalPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IFixCapitalPoolInterface;

  functions: {
    TotalRewardsPerWassetAtMaturity(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "TotalRewardsPerWassetAtMaturity(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceBonds(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceBonds(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    balanceYield(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceYield(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    burnZCBFrom(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnZCBFrom(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimBondPayout(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimBondPayout(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currentConversionRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "currentConversionRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    depositWrappedToken(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositWrappedToken(address,uint256)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dualApprove(
      _spender: string,
      _allowanceZCB: BigNumberish,
      _allowanceYT: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "dualApprove(address,uint256,uint256)"(
      _spender: string,
      _allowanceZCB: BigNumberish,
      _allowanceYT: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enterPayoutPhase(overrides?: Overrides): Promise<ContractTransaction>;

    "enterPayoutPhase()"(overrides?: Overrides): Promise<ContractTransaction>;

    finalize(overrides?: Overrides): Promise<ContractTransaction>;

    "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

    flashFee(
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "flashFee(uint256,int256)"(
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    flashLoan(
      receiver: string,
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flashLoan(address,uint256,int256,bytes)"(
      receiver: string,
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    inPayoutPhase(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "inPayoutPhase()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    infoOracleAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "infoOracleAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    isFinalized(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isFinalized()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    lastUpdate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastUpdate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maturity(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "maturity()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    maturityConversionRate(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maturityConversionRate()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maxFlashLoan(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "maxFlashLoan()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    mintZCBTo(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintZCBTo(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setVaultFactoryAddress(
      _vaultFactoryAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVaultFactoryAddress(address)"(
      _vaultFactoryAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalBalanceZCB(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalBalanceZCB(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferPosition(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferPosition(address,uint256,int256)"(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferPositionFrom(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferPositionFrom(address,address,uint256,int256)"(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferYT(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferYT(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferZCB(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferZCB(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlyingAssetAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "underlyingAssetAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    whitelistedVaultFactories(
      _vaultFactoryAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      whitelisted: boolean;
      0: boolean;
    }>;

    "whitelistedVaultFactories(address)"(
      _vaultFactoryAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      whitelisted: boolean;
      0: boolean;
    }>;

    withdraw(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,bool)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAll(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAll(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    wrappedTokenFree(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      wrappedTknFree: BigNumber;
      0: BigNumber;
    }>;

    "wrappedTokenFree(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      wrappedTknFree: BigNumber;
      0: BigNumber;
    }>;

    wrapper(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "wrapper()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    yieldTokenAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "yieldTokenAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    zeroCouponBondAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "zeroCouponBondAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  TotalRewardsPerWassetAtMaturity(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "TotalRewardsPerWassetAtMaturity(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceBonds(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceBonds(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceYield(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceYield(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnZCBFrom(
    _owner: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnZCBFrom(address,uint256)"(
    _owner: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimBondPayout(
    _to: string,
    _unwrap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimBondPayout(address,bool)"(
    _to: string,
    _unwrap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currentConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

  "currentConversionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  depositWrappedToken(
    _to: string,
    _amountWrappedTkn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositWrappedToken(address,uint256)"(
    _to: string,
    _amountWrappedTkn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dualApprove(
    _spender: string,
    _allowanceZCB: BigNumberish,
    _allowanceYT: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "dualApprove(address,uint256,uint256)"(
    _spender: string,
    _allowanceZCB: BigNumberish,
    _allowanceYT: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enterPayoutPhase(overrides?: Overrides): Promise<ContractTransaction>;

  "enterPayoutPhase()"(overrides?: Overrides): Promise<ContractTransaction>;

  finalize(overrides?: Overrides): Promise<ContractTransaction>;

  "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

  flashFee(
    amountYield: BigNumberish,
    amountBond: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "flashFee(uint256,int256)"(
    amountYield: BigNumberish,
    amountBond: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  flashLoan(
    receiver: string,
    amountYield: BigNumberish,
    amountBond: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flashLoan(address,uint256,int256,bytes)"(
    receiver: string,
    amountYield: BigNumberish,
    amountBond: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  inPayoutPhase(overrides?: CallOverrides): Promise<boolean>;

  "inPayoutPhase()"(overrides?: CallOverrides): Promise<boolean>;

  infoOracleAddress(overrides?: CallOverrides): Promise<string>;

  "infoOracleAddress()"(overrides?: CallOverrides): Promise<string>;

  isFinalized(overrides?: CallOverrides): Promise<boolean>;

  "isFinalized()"(overrides?: CallOverrides): Promise<boolean>;

  lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdate()"(overrides?: CallOverrides): Promise<BigNumber>;

  maturity(overrides?: CallOverrides): Promise<number>;

  "maturity()"(overrides?: CallOverrides): Promise<number>;

  maturityConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

  "maturityConversionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxFlashLoan(overrides?: CallOverrides): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "maxFlashLoan()"(overrides?: CallOverrides): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  mintZCBTo(
    _owner: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintZCBTo(address,uint256)"(
    _owner: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setVaultFactoryAddress(
    _vaultFactoryAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVaultFactoryAddress(address)"(
    _vaultFactoryAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalBalanceZCB(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalBalanceZCB(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferPosition(
    _to: string,
    _yield: BigNumberish,
    _bond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferPosition(address,uint256,int256)"(
    _to: string,
    _yield: BigNumberish,
    _bond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferPositionFrom(
    _from: string,
    _to: string,
    _yield: BigNumberish,
    _bond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferPositionFrom(address,address,uint256,int256)"(
    _from: string,
    _to: string,
    _yield: BigNumberish,
    _bond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferYT(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferYT(address,address,uint256)"(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferZCB(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferZCB(address,address,uint256)"(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlyingAssetAddress(overrides?: CallOverrides): Promise<string>;

  "underlyingAssetAddress()"(overrides?: CallOverrides): Promise<string>;

  whitelistedVaultFactories(
    _vaultFactoryAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "whitelistedVaultFactories(address)"(
    _vaultFactoryAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    _to: string,
    _amountWrappedTkn: BigNumberish,
    _unwrap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,bool)"(
    _to: string,
    _amountWrappedTkn: BigNumberish,
    _unwrap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAll(
    _to: string,
    _unwrap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAll(address,bool)"(
    _to: string,
    _unwrap: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  wrappedTokenFree(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "wrappedTokenFree(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  wrapper(overrides?: CallOverrides): Promise<string>;

  "wrapper()"(overrides?: CallOverrides): Promise<string>;

  yieldTokenAddress(overrides?: CallOverrides): Promise<string>;

  "yieldTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  zeroCouponBondAddress(overrides?: CallOverrides): Promise<string>;

  "zeroCouponBondAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    TotalRewardsPerWassetAtMaturity(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "TotalRewardsPerWassetAtMaturity(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceBonds(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceBonds(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceYield(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceYield(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnZCBFrom(
      _owner: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnZCBFrom(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBondPayout(
      _to: string,
      _unwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimBondPayout(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    currentConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    "currentConversionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositWrappedToken(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositWrappedToken(address,uint256)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dualApprove(
      _spender: string,
      _allowanceZCB: BigNumberish,
      _allowanceYT: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "dualApprove(address,uint256,uint256)"(
      _spender: string,
      _allowanceZCB: BigNumberish,
      _allowanceYT: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterPayoutPhase(overrides?: CallOverrides): Promise<void>;

    "enterPayoutPhase()"(overrides?: CallOverrides): Promise<void>;

    finalize(overrides?: CallOverrides): Promise<void>;

    "finalize()"(overrides?: CallOverrides): Promise<void>;

    flashFee(
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "flashFee(uint256,int256)"(
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    flashLoan(
      receiver: string,
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "flashLoan(address,uint256,int256,bytes)"(
      receiver: string,
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inPayoutPhase(overrides?: CallOverrides): Promise<boolean>;

    "inPayoutPhase()"(overrides?: CallOverrides): Promise<boolean>;

    infoOracleAddress(overrides?: CallOverrides): Promise<string>;

    "infoOracleAddress()"(overrides?: CallOverrides): Promise<string>;

    isFinalized(overrides?: CallOverrides): Promise<boolean>;

    "isFinalized()"(overrides?: CallOverrides): Promise<boolean>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdate()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<number>;

    "maturity()"(overrides?: CallOverrides): Promise<number>;

    maturityConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    "maturityConversionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxFlashLoan(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "maxFlashLoan()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    mintZCBTo(
      _owner: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintZCBTo(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultFactoryAddress(
      _vaultFactoryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setVaultFactoryAddress(address)"(
      _vaultFactoryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBalanceZCB(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalBalanceZCB(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferPosition(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferPosition(address,uint256,int256)"(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPositionFrom(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferPositionFrom(address,address,uint256,int256)"(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferYT(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferYT(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferZCB(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferZCB(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingAssetAddress(overrides?: CallOverrides): Promise<string>;

    "underlyingAssetAddress()"(overrides?: CallOverrides): Promise<string>;

    whitelistedVaultFactories(
      _vaultFactoryAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "whitelistedVaultFactories(address)"(
      _vaultFactoryAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256,bool)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(
      _to: string,
      _unwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAll(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    wrappedTokenFree(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wrappedTokenFree(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrapper(overrides?: CallOverrides): Promise<string>;

    "wrapper()"(overrides?: CallOverrides): Promise<string>;

    yieldTokenAddress(overrides?: CallOverrides): Promise<string>;

    "yieldTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    zeroCouponBondAddress(overrides?: CallOverrides): Promise<string>;

    "zeroCouponBondAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    BalanceUpdate(
      owner: string | null,
      newYield: null,
      newBond: null
    ): EventFilter;

    BondBalanceUpdate(owner: string | null, newBond: null): EventFilter;

    ClaimPayout(owner: string | null): EventFilter;

    Deposit(to: string | null, wrappedAmountDeposited: null): EventFilter;

    Withdrawal(from: string | null, wrappedAmountWithdrawn: null): EventFilter;
  };

  estimateGas: {
    TotalRewardsPerWassetAtMaturity(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "TotalRewardsPerWassetAtMaturity(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceBonds(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceBonds(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceYield(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceYield(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnZCBFrom(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnZCBFrom(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimBondPayout(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimBondPayout(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currentConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    "currentConversionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositWrappedToken(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositWrappedToken(address,uint256)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dualApprove(
      _spender: string,
      _allowanceZCB: BigNumberish,
      _allowanceYT: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "dualApprove(address,uint256,uint256)"(
      _spender: string,
      _allowanceZCB: BigNumberish,
      _allowanceYT: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enterPayoutPhase(overrides?: Overrides): Promise<BigNumber>;

    "enterPayoutPhase()"(overrides?: Overrides): Promise<BigNumber>;

    finalize(overrides?: Overrides): Promise<BigNumber>;

    "finalize()"(overrides?: Overrides): Promise<BigNumber>;

    flashFee(
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "flashFee(uint256,int256)"(
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      receiver: string,
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "flashLoan(address,uint256,int256,bytes)"(
      receiver: string,
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    inPayoutPhase(overrides?: CallOverrides): Promise<BigNumber>;

    "inPayoutPhase()"(overrides?: CallOverrides): Promise<BigNumber>;

    infoOracleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "infoOracleAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    isFinalized(overrides?: CallOverrides): Promise<BigNumber>;

    "isFinalized()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdate()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturityConversionRate(overrides?: CallOverrides): Promise<BigNumber>;

    "maturityConversionRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxFlashLoan(overrides?: CallOverrides): Promise<BigNumber>;

    "maxFlashLoan()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintZCBTo(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintZCBTo(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setVaultFactoryAddress(
      _vaultFactoryAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVaultFactoryAddress(address)"(
      _vaultFactoryAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalBalanceZCB(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalBalanceZCB(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferPosition(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferPosition(address,uint256,int256)"(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferPositionFrom(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferPositionFrom(address,address,uint256,int256)"(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferYT(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferYT(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferZCB(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferZCB(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlyingAssetAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingAssetAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedVaultFactories(
      _vaultFactoryAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelistedVaultFactories(address)"(
      _vaultFactoryAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,bool)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAll(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawAll(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    wrappedTokenFree(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "wrappedTokenFree(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wrapper(overrides?: CallOverrides): Promise<BigNumber>;

    "wrapper()"(overrides?: CallOverrides): Promise<BigNumber>;

    yieldTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "yieldTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    zeroCouponBondAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "zeroCouponBondAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TotalRewardsPerWassetAtMaturity(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TotalRewardsPerWassetAtMaturity(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceBonds(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceBonds(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceYield(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceYield(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnZCBFrom(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnZCBFrom(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimBondPayout(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimBondPayout(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currentConversionRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentConversionRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositWrappedToken(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositWrappedToken(address,uint256)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dualApprove(
      _spender: string,
      _allowanceZCB: BigNumberish,
      _allowanceYT: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "dualApprove(address,uint256,uint256)"(
      _spender: string,
      _allowanceZCB: BigNumberish,
      _allowanceYT: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enterPayoutPhase(overrides?: Overrides): Promise<PopulatedTransaction>;

    "enterPayoutPhase()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    finalize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "finalize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    flashFee(
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "flashFee(uint256,int256)"(
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashLoan(
      receiver: string,
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flashLoan(address,uint256,int256,bytes)"(
      receiver: string,
      amountYield: BigNumberish,
      amountBond: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    inPayoutPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "inPayoutPhase()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    infoOracleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "infoOracleAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isFinalized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maturity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maturity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maturityConversionRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maturityConversionRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxFlashLoan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxFlashLoan()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintZCBTo(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintZCBTo(address,uint256)"(
      _owner: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setVaultFactoryAddress(
      _vaultFactoryAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVaultFactoryAddress(address)"(
      _vaultFactoryAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalBalanceZCB(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalBalanceZCB(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferPosition(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferPosition(address,uint256,int256)"(
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferPositionFrom(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferPositionFrom(address,address,uint256,int256)"(
      _from: string,
      _to: string,
      _yield: BigNumberish,
      _bond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferYT(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferYT(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferZCB(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferZCB(address,address,uint256)"(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlyingAssetAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "underlyingAssetAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedVaultFactories(
      _vaultFactoryAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelistedVaultFactories(address)"(
      _vaultFactoryAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,bool)"(
      _to: string,
      _amountWrappedTkn: BigNumberish,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAll(address,bool)"(
      _to: string,
      _unwrap: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    wrappedTokenFree(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "wrappedTokenFree(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wrapper()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yieldTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yieldTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zeroCouponBondAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "zeroCouponBondAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
