/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface YTammInterface extends ethers.utils.Interface {
  functions: {
    "FCPaddress()": FunctionFragment;
    "ReserveQuoteFromYT(int128)": FunctionFragment;
    "ReserveQuoteToYT(int128)": FunctionFragment;
    "SlippageConstant()": FunctionFragment;
    "SwapFromSpecificYT(int128)": FunctionFragment;
    "SwapFromSpecificYTWithLimit(int128,uint256)": FunctionFragment;
    "SwapToSpecificYT(int128)": FunctionFragment;
    "SwapToSpecificYTWithLimit(int128,uint256)": FunctionFragment;
    "TakeQuote(uint256,int128,bool)": FunctionFragment;
    "YTaddress()": FunctionFragment;
    "YTtoLmultiplier()": FunctionFragment;
    "ZCBaddress()": FunctionFragment;
    "ZCBammAddress()": FunctionFragment;
    "activeTotalSupply()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "claimDividend(address)": FunctionFragment;
    "contractBondDividend(uint256)": FunctionFragment;
    "contractClaimDividend()": FunctionFragment;
    "contractYieldDividend(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "firstMint(uint128)": FunctionFragment;
    "getReserves()": FunctionFragment;
    "ineligibleBalanceOf(address)": FunctionFragment;
    "inflatedTotalSupply()": FunctionFragment;
    "lastRecalibration()": FunctionFragment;
    "lastWithdraw()": FunctionFragment;
    "length()": FunctionFragment;
    "maturity()": FunctionFragment;
    "mint(uint256,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "recalibrate()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferIneligible(address,uint256)": FunctionFragment;
    "transferIneligibleFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FCPaddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ReserveQuoteFromYT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ReserveQuoteToYT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SlippageConstant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SwapFromSpecificYT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SwapFromSpecificYTWithLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SwapToSpecificYT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "SwapToSpecificYTWithLimit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "TakeQuote",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "YTaddress", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "YTtoLmultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZCBaddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZCBammAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimDividend",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractBondDividend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractClaimDividend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractYieldDividend",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "firstMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ineligibleBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "inflatedTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRecalibration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(functionFragment: "maturity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recalibrate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferIneligible",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferIneligibleFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "FCPaddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ReserveQuoteFromYT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ReserveQuoteToYT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SlippageConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SwapFromSpecificYT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SwapFromSpecificYTWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SwapToSpecificYT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SwapToSpecificYTWithLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TakeQuote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "YTaddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "YTtoLmultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZCBaddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ZCBammAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractBondDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractClaimDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractYieldDividend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "firstMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ineligibleBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inflatedTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRecalibration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maturity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recalibrate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferIneligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferIneligibleFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Burn(address,uint256)": EventFragment;
    "DividendDistributed(address,address,uint256,uint256)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "Swap(address,uint256,uint256,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DividendDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class YTamm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: YTammInterface;

  functions: {
    FCPaddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "FCPaddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ReserveQuoteFromYT(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ReserveQuoteFromYT(int128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ReserveQuoteToYT(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ReserveQuoteToYT(int128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SlippageConstant(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "SlippageConstant()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    SwapFromSpecificYT(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SwapFromSpecificYT(int128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SwapFromSpecificYTWithLimit(
      _amount: BigNumberish,
      _minUout: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SwapFromSpecificYTWithLimit(int128,uint256)"(
      _amount: BigNumberish,
      _minUout: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SwapToSpecificYT(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SwapToSpecificYT(int128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    SwapToSpecificYTWithLimit(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "SwapToSpecificYTWithLimit(int128,uint256)"(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    TakeQuote(
      _amountU: BigNumberish,
      _amountYT: BigNumberish,
      _YTin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "TakeQuote(uint256,int128,bool)"(
      _amountU: BigNumberish,
      _amountYT: BigNumberish,
      _YTin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    YTaddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "YTaddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    YTtoLmultiplier(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "YTtoLmultiplier()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    ZCBaddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ZCBaddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ZCBammAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "ZCBammAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    activeTotalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "activeTotalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    burn(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimDividend(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimDividend(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    contractBondDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "contractBondDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    contractClaimDividend(overrides?: Overrides): Promise<ContractTransaction>;

    "contractClaimDividend()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    contractYieldDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "contractYieldDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    decimals(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "decimals()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    firstMint(
      _Uin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "firstMint(uint128)"(
      _Uin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getReserves(overrides?: CallOverrides): Promise<{
      _Ureserves: BigNumber;
      _YTreserves: BigNumber;
      _TimeRemaining: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getReserves()"(overrides?: CallOverrides): Promise<{
      _Ureserves: BigNumber;
      _YTreserves: BigNumber;
      _TimeRemaining: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    ineligibleBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ineligibleBalanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    inflatedTotalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "inflatedTotalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lastRecalibration(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastRecalibration()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    lastWithdraw(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lastWithdraw()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    length(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "length()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    maturity(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "maturity()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    mint(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxYTin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxYTin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    recalibrate(overrides?: Overrides): Promise<ContractTransaction>;

    "recalibrate()"(overrides?: Overrides): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferIneligible(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferIneligible(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferIneligibleFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferIneligibleFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  FCPaddress(overrides?: CallOverrides): Promise<string>;

  "FCPaddress()"(overrides?: CallOverrides): Promise<string>;

  ReserveQuoteFromYT(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ReserveQuoteFromYT(int128)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ReserveQuoteToYT(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ReserveQuoteToYT(int128)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SlippageConstant(overrides?: CallOverrides): Promise<BigNumber>;

  "SlippageConstant()"(overrides?: CallOverrides): Promise<BigNumber>;

  SwapFromSpecificYT(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SwapFromSpecificYT(int128)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SwapFromSpecificYTWithLimit(
    _amount: BigNumberish,
    _minUout: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SwapFromSpecificYTWithLimit(int128,uint256)"(
    _amount: BigNumberish,
    _minUout: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SwapToSpecificYT(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SwapToSpecificYT(int128)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  SwapToSpecificYTWithLimit(
    _amount: BigNumberish,
    _maxUin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "SwapToSpecificYTWithLimit(int128,uint256)"(
    _amount: BigNumberish,
    _maxUin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  TakeQuote(
    _amountU: BigNumberish,
    _amountYT: BigNumberish,
    _YTin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "TakeQuote(uint256,int128,bool)"(
    _amountU: BigNumberish,
    _amountYT: BigNumberish,
    _YTin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  YTaddress(overrides?: CallOverrides): Promise<string>;

  "YTaddress()"(overrides?: CallOverrides): Promise<string>;

  YTtoLmultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "YTtoLmultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  ZCBaddress(overrides?: CallOverrides): Promise<string>;

  "ZCBaddress()"(overrides?: CallOverrides): Promise<string>;

  ZCBammAddress(overrides?: CallOverrides): Promise<string>;

  "ZCBammAddress()"(overrides?: CallOverrides): Promise<string>;

  activeTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "activeTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimDividend(
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimDividend(address)"(
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  contractBondDividend(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "contractBondDividend(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contractClaimDividend(overrides?: Overrides): Promise<ContractTransaction>;

  "contractClaimDividend()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  contractYieldDividend(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "contractYieldDividend(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  firstMint(
    _Uin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "firstMint(uint128)"(
    _Uin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getReserves(overrides?: CallOverrides): Promise<{
    _Ureserves: BigNumber;
    _YTreserves: BigNumber;
    _TimeRemaining: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getReserves()"(overrides?: CallOverrides): Promise<{
    _Ureserves: BigNumber;
    _YTreserves: BigNumber;
    _TimeRemaining: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  ineligibleBalanceOf(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "ineligibleBalanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  inflatedTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "inflatedTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastRecalibration(overrides?: CallOverrides): Promise<BigNumber>;

  "lastRecalibration()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  "lastWithdraw()"(overrides?: CallOverrides): Promise<BigNumber>;

  length(overrides?: CallOverrides): Promise<BigNumber>;

  "length()"(overrides?: CallOverrides): Promise<BigNumber>;

  maturity(overrides?: CallOverrides): Promise<BigNumber>;

  "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _amount: BigNumberish,
    _maxUin: BigNumberish,
    _maxYTin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(uint256,uint256,uint256)"(
    _amount: BigNumberish,
    _maxUin: BigNumberish,
    _maxYTin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  recalibrate(overrides?: Overrides): Promise<ContractTransaction>;

  "recalibrate()"(overrides?: Overrides): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferIneligible(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferIneligible(address,uint256)"(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferIneligibleFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferIneligibleFrom(address,address,uint256)"(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    FCPaddress(overrides?: CallOverrides): Promise<string>;

    "FCPaddress()"(overrides?: CallOverrides): Promise<string>;

    ReserveQuoteFromYT(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ReserveQuoteFromYT(int128)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ReserveQuoteToYT(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ReserveQuoteToYT(int128)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SlippageConstant(overrides?: CallOverrides): Promise<BigNumber>;

    "SlippageConstant()"(overrides?: CallOverrides): Promise<BigNumber>;

    SwapFromSpecificYT(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SwapFromSpecificYT(int128)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SwapFromSpecificYTWithLimit(
      _amount: BigNumberish,
      _minUout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SwapFromSpecificYTWithLimit(int128,uint256)"(
      _amount: BigNumberish,
      _minUout: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SwapToSpecificYT(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SwapToSpecificYT(int128)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SwapToSpecificYTWithLimit(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SwapToSpecificYTWithLimit(int128,uint256)"(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TakeQuote(
      _amountU: BigNumberish,
      _amountYT: BigNumberish,
      _YTin: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "TakeQuote(uint256,int128,bool)"(
      _amountU: BigNumberish,
      _amountYT: BigNumberish,
      _YTin: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    YTaddress(overrides?: CallOverrides): Promise<string>;

    "YTaddress()"(overrides?: CallOverrides): Promise<string>;

    YTtoLmultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "YTtoLmultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    ZCBaddress(overrides?: CallOverrides): Promise<string>;

    "ZCBaddress()"(overrides?: CallOverrides): Promise<string>;

    ZCBammAddress(overrides?: CallOverrides): Promise<string>;

    "ZCBammAddress()"(overrides?: CallOverrides): Promise<string>;

    activeTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "activeTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burn(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimDividend(_to: string, overrides?: CallOverrides): Promise<void>;

    "claimDividend(address)"(
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    contractBondDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractBondDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractClaimDividend(overrides?: CallOverrides): Promise<void>;

    "contractClaimDividend()"(overrides?: CallOverrides): Promise<void>;

    contractYieldDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractYieldDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    firstMint(_Uin: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "firstMint(uint128)"(
      _Uin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getReserves(overrides?: CallOverrides): Promise<{
      _Ureserves: BigNumber;
      _YTreserves: BigNumber;
      _TimeRemaining: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getReserves()"(overrides?: CallOverrides): Promise<{
      _Ureserves: BigNumber;
      _YTreserves: BigNumber;
      _TimeRemaining: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    ineligibleBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ineligibleBalanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inflatedTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "inflatedTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRecalibration(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRecalibration()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    "lastWithdraw()"(overrides?: CallOverrides): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    "length()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxYTin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxYTin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    recalibrate(overrides?: CallOverrides): Promise<void>;

    "recalibrate()"(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferIneligible(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferIneligible(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferIneligibleFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferIneligibleFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      _owner: string | null,
      _spender: string | null,
      _value: null
    ): EventFilter;

    Burn(user: null, amount: null): EventFilter;

    DividendDistributed(
      _claimer: null,
      _to: null,
      _amtZCB: null,
      _amtYT: null
    ): EventFilter;

    Mint(user: null, amount: null): EventFilter;

    Swap(user: null, amountYT: null, amountU: null, YTin: null): EventFilter;

    Transfer(
      _from: string | null,
      _to: string | null,
      _value: null
    ): EventFilter;
  };

  estimateGas: {
    FCPaddress(overrides?: CallOverrides): Promise<BigNumber>;

    "FCPaddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    ReserveQuoteFromYT(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ReserveQuoteFromYT(int128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ReserveQuoteToYT(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ReserveQuoteToYT(int128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    SlippageConstant(overrides?: CallOverrides): Promise<BigNumber>;

    "SlippageConstant()"(overrides?: CallOverrides): Promise<BigNumber>;

    SwapFromSpecificYT(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SwapFromSpecificYT(int128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    SwapFromSpecificYTWithLimit(
      _amount: BigNumberish,
      _minUout: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SwapFromSpecificYTWithLimit(int128,uint256)"(
      _amount: BigNumberish,
      _minUout: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    SwapToSpecificYT(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SwapToSpecificYT(int128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    SwapToSpecificYTWithLimit(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "SwapToSpecificYTWithLimit(int128,uint256)"(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    TakeQuote(
      _amountU: BigNumberish,
      _amountYT: BigNumberish,
      _YTin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "TakeQuote(uint256,int128,bool)"(
      _amountU: BigNumberish,
      _amountYT: BigNumberish,
      _YTin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    YTaddress(overrides?: CallOverrides): Promise<BigNumber>;

    "YTaddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    YTtoLmultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "YTtoLmultiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    ZCBaddress(overrides?: CallOverrides): Promise<BigNumber>;

    "ZCBaddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    ZCBammAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "ZCBammAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    activeTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "activeTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "burn(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimDividend(_to: string, overrides?: Overrides): Promise<BigNumber>;

    "claimDividend(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    contractBondDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractBondDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractClaimDividend(overrides?: Overrides): Promise<BigNumber>;

    "contractClaimDividend()"(overrides?: Overrides): Promise<BigNumber>;

    contractYieldDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractYieldDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    firstMint(_Uin: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "firstMint(uint128)"(
      _Uin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    ineligibleBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ineligibleBalanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inflatedTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "inflatedTotalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRecalibration(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRecalibration()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    "lastWithdraw()"(overrides?: CallOverrides): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    "length()"(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxYTin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxYTin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    recalibrate(overrides?: Overrides): Promise<BigNumber>;

    "recalibrate()"(overrides?: Overrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferIneligible(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferIneligible(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferIneligibleFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferIneligibleFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FCPaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FCPaddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ReserveQuoteFromYT(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ReserveQuoteFromYT(int128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ReserveQuoteToYT(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ReserveQuoteToYT(int128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SlippageConstant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SlippageConstant()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SwapFromSpecificYT(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SwapFromSpecificYT(int128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SwapFromSpecificYTWithLimit(
      _amount: BigNumberish,
      _minUout: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SwapFromSpecificYTWithLimit(int128,uint256)"(
      _amount: BigNumberish,
      _minUout: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SwapToSpecificYT(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SwapToSpecificYT(int128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    SwapToSpecificYTWithLimit(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "SwapToSpecificYTWithLimit(int128,uint256)"(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    TakeQuote(
      _amountU: BigNumberish,
      _amountYT: BigNumberish,
      _YTin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "TakeQuote(uint256,int128,bool)"(
      _amountU: BigNumberish,
      _amountYT: BigNumberish,
      _YTin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    YTaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "YTaddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YTtoLmultiplier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "YTtoLmultiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZCBaddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ZCBaddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ZCBammAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ZCBammAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "activeTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimDividend(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimDividend(address)"(
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    contractBondDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractBondDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractClaimDividend(overrides?: Overrides): Promise<PopulatedTransaction>;

    "contractClaimDividend()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    contractYieldDividend(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractYieldDividend(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstMint(
      _Uin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "firstMint(uint128)"(
      _Uin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ineligibleBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ineligibleBalanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inflatedTotalSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "inflatedTotalSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRecalibration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastRecalibration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastWithdraw()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "length()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maturity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maturity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxYTin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maxUin: BigNumberish,
      _maxYTin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recalibrate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "recalibrate()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferIneligible(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferIneligible(address,uint256)"(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferIneligibleFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferIneligibleFrom(address,address,uint256)"(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
