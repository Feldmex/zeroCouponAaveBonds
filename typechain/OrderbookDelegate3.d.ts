/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OrderbookDelegate3Interface extends ethers.utils.Interface {
  functions: {
    "deposit(uint256,int256)": FunctionFragment;
    "forceClaimSubAccountRewards()": FunctionFragment;
    "forceRateDataUpdate()": FunctionFragment;
    "limitSellYT(uint256,uint256,uint256,uint256)": FunctionFragment;
    "limitSellZCB(uint256,uint256,uint256,uint256)": FunctionFragment;
    "modifyYTLimitSell(int256,uint256,uint256,uint256,bool)": FunctionFragment;
    "modifyZCBLimitSell(int256,uint256,uint256,uint256,bool)": FunctionFragment;
    "setOracleMCR(uint256)": FunctionFragment;
    "withdraw(uint256,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceClaimSubAccountRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceRateDataUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitSellYT",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "limitSellZCB",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyYTLimitSell",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyZCBLimitSell",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleMCR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceClaimSubAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceRateDataUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitSellYT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitSellZCB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyYTLimitSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyZCBLimitSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleMCR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class OrderbookDelegate3 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OrderbookDelegate3Interface;

  functions: {
    deposit(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forceClaimSubAccountRewards(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forceClaimSubAccountRewards()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forceRateDataUpdate(overrides?: Overrides): Promise<ContractTransaction>;

    "forceRateDataUpdate()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    limitSellYT(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "limitSellYT(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    limitSellZCB(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "limitSellZCB(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    modifyYTLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "modifyYTLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    modifyZCBLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "modifyZCBLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOracleMCR(
      _MCR: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracleMCR(uint256)"(
      _MCR: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  deposit(
    _amountYield: BigNumberish,
    _amountBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,int256)"(
    _amountYield: BigNumberish,
    _amountBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forceClaimSubAccountRewards(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forceClaimSubAccountRewards()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forceRateDataUpdate(overrides?: Overrides): Promise<ContractTransaction>;

  "forceRateDataUpdate()"(overrides?: Overrides): Promise<ContractTransaction>;

  limitSellYT(
    _amount: BigNumberish,
    _maturityConversionRate: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "limitSellYT(uint256,uint256,uint256,uint256)"(
    _amount: BigNumberish,
    _maturityConversionRate: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  limitSellZCB(
    _amount: BigNumberish,
    _maturityConversionRate: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "limitSellZCB(uint256,uint256,uint256,uint256)"(
    _amount: BigNumberish,
    _maturityConversionRate: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  modifyYTLimitSell(
    _amount: BigNumberish,
    _targetID: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    _removeBelowMin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "modifyYTLimitSell(int256,uint256,uint256,uint256,bool)"(
    _amount: BigNumberish,
    _targetID: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    _removeBelowMin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  modifyZCBLimitSell(
    _amount: BigNumberish,
    _targetID: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    _removeBelowMin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "modifyZCBLimitSell(int256,uint256,uint256,uint256,bool)"(
    _amount: BigNumberish,
    _targetID: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    _removeBelowMin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOracleMCR(
    _MCR: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracleMCR(uint256)"(
    _MCR: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _amountYield: BigNumberish,
    _amountBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,int256)"(
    _amountYield: BigNumberish,
    _amountBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    deposit(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceClaimSubAccountRewards(overrides?: CallOverrides): Promise<void>;

    "forceClaimSubAccountRewards()"(overrides?: CallOverrides): Promise<void>;

    forceRateDataUpdate(overrides?: CallOverrides): Promise<void>;

    "forceRateDataUpdate()"(overrides?: CallOverrides): Promise<void>;

    limitSellYT(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      newID: BigNumber;
      prevID: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "limitSellYT(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      newID: BigNumber;
      prevID: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    limitSellZCB(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      newID: BigNumber;
      prevID: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "limitSellZCB(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      newID: BigNumber;
      prevID: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    modifyYTLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "modifyYTLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyZCBLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "modifyZCBLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOracleMCR(_MCR: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setOracleMCR(uint256)"(
      _MCR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deposit(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forceClaimSubAccountRewards(overrides?: Overrides): Promise<BigNumber>;

    "forceClaimSubAccountRewards()"(overrides?: Overrides): Promise<BigNumber>;

    forceRateDataUpdate(overrides?: Overrides): Promise<BigNumber>;

    "forceRateDataUpdate()"(overrides?: Overrides): Promise<BigNumber>;

    limitSellYT(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "limitSellYT(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    limitSellZCB(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "limitSellZCB(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    modifyYTLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "modifyYTLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    modifyZCBLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "modifyZCBLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOracleMCR(_MCR: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setOracleMCR(uint256)"(
      _MCR: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deposit(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forceClaimSubAccountRewards(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forceClaimSubAccountRewards()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forceRateDataUpdate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "forceRateDataUpdate()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    limitSellYT(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "limitSellYT(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    limitSellZCB(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "limitSellZCB(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    modifyYTLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "modifyYTLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    modifyZCBLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "modifyZCBLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOracleMCR(
      _MCR: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracleMCR(uint256)"(
      _MCR: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
