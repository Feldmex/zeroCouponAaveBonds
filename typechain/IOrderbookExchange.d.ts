/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IOrderbookExchangeInterface extends ethers.utils.Interface {
  functions: {
    "BondDeposited(address)": FunctionFragment;
    "FCP()": FunctionFragment;
    "IORC()": FunctionFragment;
    "YTSells(uint256)": FunctionFragment;
    "YieldDeposited(address)": FunctionFragment;
    "ZCBSells(uint256)": FunctionFragment;
    "claimRevenue()": FunctionFragment;
    "deposit(uint256,int256)": FunctionFragment;
    "forceClaimSubAccountRewards()": FunctionFragment;
    "forceRateDataUpdate()": FunctionFragment;
    "getAPYFromOracle()": FunctionFragment;
    "getImpliedMCRFromOracle()": FunctionFragment;
    "getMinimumOrderSize()": FunctionFragment;
    "getMinimumOrderSizeMode()": FunctionFragment;
    "getOracleData()": FunctionFragment;
    "headYTSellID()": FunctionFragment;
    "headZCBSellID()": FunctionFragment;
    "impliedYieldToMaturity()": FunctionFragment;
    "limitSellYT(uint256,uint256,uint256,uint256)": FunctionFragment;
    "limitSellZCB(uint256,uint256,uint256,uint256)": FunctionFragment;
    "lockedYT(address)": FunctionFragment;
    "lockedZCB(address)": FunctionFragment;
    "marketBuyYT(uint256,uint256,uint256,uint16,bool)": FunctionFragment;
    "marketBuyZCB(uint256,uint256,uint256,uint16,bool)": FunctionFragment;
    "marketSellUnitYTtoU(uint256,uint256,uint256,uint16,bool)": FunctionFragment;
    "marketSellYT(uint256,uint256,uint256,uint16,bool)": FunctionFragment;
    "marketSellZCB(uint256,uint256,uint256,uint16,bool)": FunctionFragment;
    "marketSellZCBtoU(uint256,uint256,uint256,uint16,bool)": FunctionFragment;
    "maturity()": FunctionFragment;
    "modifyYTLimitSell(int256,uint256,uint256,uint256,bool)": FunctionFragment;
    "modifyZCBLimitSell(int256,uint256,uint256,uint256,bool)": FunctionFragment;
    "setMinimumOrderSize(uint8,uint256)": FunctionFragment;
    "setOracleMCR(uint256)": FunctionFragment;
    "withdraw(uint256,int256)": FunctionFragment;
    "wrapper()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BondDeposited",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "FCP", values?: undefined): string;
  encodeFunctionData(functionFragment: "IORC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "YTSells",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "YieldDeposited",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ZCBSells",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceClaimSubAccountRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forceRateDataUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAPYFromOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getImpliedMCRFromOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumOrderSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumOrderSizeMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "headYTSellID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "headZCBSellID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "impliedYieldToMaturity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitSellYT",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "limitSellZCB",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lockedYT", values: [string]): string;
  encodeFunctionData(functionFragment: "lockedZCB", values: [string]): string;
  encodeFunctionData(
    functionFragment: "marketBuyYT",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "marketBuyZCB",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "marketSellUnitYTtoU",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "marketSellYT",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "marketSellZCB",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "marketSellZCBtoU",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "maturity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "modifyYTLimitSell",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyZCBLimitSell",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumOrderSize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleMCR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wrapper", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BondDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FCP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "IORC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "YTSells", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "YieldDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZCBSells", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceClaimSubAccountRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceRateDataUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAPYFromOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImpliedMCRFromOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumOrderSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumOrderSizeMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "headYTSellID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "headZCBSellID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "impliedYieldToMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitSellYT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitSellZCB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockedYT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockedZCB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketBuyYT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketBuyZCB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketSellUnitYTtoU",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketSellYT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketSellZCB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketSellZCBtoU",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maturity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyYTLimitSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyZCBLimitSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumOrderSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleMCR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrapper", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,int256)": EventFragment;
    "MakeLimitSellYT(address,uint256,uint256,uint256,uint256)": EventFragment;
    "MakeLimitSellZCB(address,uint256,uint256,uint256,uint256)": EventFragment;
    "MarketBuyYT(address,uint256,uint256)": EventFragment;
    "MarketBuyZCB(address,uint256,uint256)": EventFragment;
    "ModifyOrder(uint256,int256)": EventFragment;
    "Withdrawal(address,uint256,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakeLimitSellYT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakeLimitSellZCB"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketBuyYT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketBuyZCB"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModifyOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class IOrderbookExchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IOrderbookExchangeInterface;

  functions: {
    BondDeposited(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "BondDeposited(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    FCP(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "FCP()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    IORC(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "IORC()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    YTSells(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      maker: string;
      amount: BigNumber;
      maturityConversionRate: BigNumber;
      nextID: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "YTSells(uint256)"(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      maker: string;
      amount: BigNumber;
      maturityConversionRate: BigNumber;
      nextID: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    YieldDeposited(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "YieldDeposited(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ZCBSells(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      maker: string;
      amount: BigNumber;
      maturityConversionRate: BigNumber;
      nextID: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "ZCBSells(uint256)"(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      maker: string;
      amount: BigNumber;
      maturityConversionRate: BigNumber;
      nextID: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    claimRevenue(overrides?: Overrides): Promise<ContractTransaction>;

    "claimRevenue()"(overrides?: Overrides): Promise<ContractTransaction>;

    deposit(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forceClaimSubAccountRewards(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forceClaimSubAccountRewards()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forceRateDataUpdate(overrides?: Overrides): Promise<ContractTransaction>;

    "forceRateDataUpdate()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAPYFromOracle(overrides?: CallOverrides): Promise<{
      APY: BigNumber;
      0: BigNumber;
    }>;

    "getAPYFromOracle()"(overrides?: CallOverrides): Promise<{
      APY: BigNumber;
      0: BigNumber;
    }>;

    getImpliedMCRFromOracle(overrides?: CallOverrides): Promise<{
      impliedMCR: BigNumber;
      0: BigNumber;
    }>;

    "getImpliedMCRFromOracle()"(overrides?: CallOverrides): Promise<{
      impliedMCR: BigNumber;
      0: BigNumber;
    }>;

    getMinimumOrderSize(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getMinimumOrderSize()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getMinimumOrderSizeMode(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "getMinimumOrderSizeMode()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    getOracleData(overrides?: CallOverrides): Promise<{
      _impliedMCRs: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      _lastDatapointCollection: BigNumber;
      _oracleMCR: BigNumber;
      _toSet: number;
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    "getOracleData()"(overrides?: CallOverrides): Promise<{
      _impliedMCRs: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      _lastDatapointCollection: BigNumber;
      _oracleMCR: BigNumber;
      _toSet: number;
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    headYTSellID(overrides?: CallOverrides): Promise<{
      ID: BigNumber;
      0: BigNumber;
    }>;

    "headYTSellID()"(overrides?: CallOverrides): Promise<{
      ID: BigNumber;
      0: BigNumber;
    }>;

    headZCBSellID(overrides?: CallOverrides): Promise<{
      ID: BigNumber;
      0: BigNumber;
    }>;

    "headZCBSellID()"(overrides?: CallOverrides): Promise<{
      ID: BigNumber;
      0: BigNumber;
    }>;

    impliedYieldToMaturity(overrides?: CallOverrides): Promise<{
      yieldToMaturity: BigNumber;
      0: BigNumber;
    }>;

    "impliedYieldToMaturity()"(overrides?: CallOverrides): Promise<{
      yieldToMaturity: BigNumber;
      0: BigNumber;
    }>;

    limitSellYT(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "limitSellYT(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    limitSellZCB(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "limitSellZCB(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lockedYT(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lockedYT(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lockedZCB(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lockedZCB(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    marketBuyYT(
      _amountYT: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "marketBuyYT(uint256,uint256,uint256,uint16,bool)"(
      _amountYT: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    marketBuyZCB(
      _amountZCB: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "marketBuyZCB(uint256,uint256,uint256,uint16,bool)"(
      _amountZCB: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    marketSellUnitYTtoU(
      _unitAmountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "marketSellUnitYTtoU(uint256,uint256,uint256,uint16,bool)"(
      _unitAmountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    marketSellYT(
      _amountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "marketSellYT(uint256,uint256,uint256,uint16,bool)"(
      _amountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    marketSellZCB(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "marketSellZCB(uint256,uint256,uint256,uint16,bool)"(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    marketSellZCBtoU(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "marketSellZCBtoU(uint256,uint256,uint256,uint16,bool)"(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maturity(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "maturity()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    modifyYTLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "modifyYTLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    modifyZCBLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "modifyZCBLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinimumOrderSize(
      mode: BigNumberish,
      _minimumOrderSize: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinimumOrderSize(uint8,uint256)"(
      mode: BigNumberish,
      _minimumOrderSize: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOracleMCR(
      _MCR: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracleMCR(uint256)"(
      _MCR: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    wrapper(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "wrapper()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  BondDeposited(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "BondDeposited(address)"(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  FCP(overrides?: CallOverrides): Promise<string>;

  "FCP()"(overrides?: CallOverrides): Promise<string>;

  IORC(overrides?: CallOverrides): Promise<string>;

  "IORC()"(overrides?: CallOverrides): Promise<string>;

  YTSells(
    _ID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    maker: string;
    amount: BigNumber;
    maturityConversionRate: BigNumber;
    nextID: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "YTSells(uint256)"(
    _ID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    maker: string;
    amount: BigNumber;
    maturityConversionRate: BigNumber;
    nextID: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  YieldDeposited(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "YieldDeposited(address)"(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ZCBSells(
    _ID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    maker: string;
    amount: BigNumber;
    maturityConversionRate: BigNumber;
    nextID: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  "ZCBSells(uint256)"(
    _ID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    maker: string;
    amount: BigNumber;
    maturityConversionRate: BigNumber;
    nextID: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  claimRevenue(overrides?: Overrides): Promise<ContractTransaction>;

  "claimRevenue()"(overrides?: Overrides): Promise<ContractTransaction>;

  deposit(
    _amountYield: BigNumberish,
    _amountBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,int256)"(
    _amountYield: BigNumberish,
    _amountBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forceClaimSubAccountRewards(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forceClaimSubAccountRewards()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forceRateDataUpdate(overrides?: Overrides): Promise<ContractTransaction>;

  "forceRateDataUpdate()"(overrides?: Overrides): Promise<ContractTransaction>;

  getAPYFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

  "getAPYFromOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

  getImpliedMCRFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

  "getImpliedMCRFromOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMinimumOrderSize(overrides?: CallOverrides): Promise<BigNumber>;

  "getMinimumOrderSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMinimumOrderSizeMode(overrides?: CallOverrides): Promise<number>;

  "getMinimumOrderSizeMode()"(overrides?: CallOverrides): Promise<number>;

  getOracleData(overrides?: CallOverrides): Promise<{
    _impliedMCRs: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    _lastDatapointCollection: BigNumber;
    _oracleMCR: BigNumber;
    _toSet: number;
    0: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    1: BigNumber;
    2: BigNumber;
    3: number;
  }>;

  "getOracleData()"(overrides?: CallOverrides): Promise<{
    _impliedMCRs: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    _lastDatapointCollection: BigNumber;
    _oracleMCR: BigNumber;
    _toSet: number;
    0: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    1: BigNumber;
    2: BigNumber;
    3: number;
  }>;

  headYTSellID(overrides?: CallOverrides): Promise<BigNumber>;

  "headYTSellID()"(overrides?: CallOverrides): Promise<BigNumber>;

  headZCBSellID(overrides?: CallOverrides): Promise<BigNumber>;

  "headZCBSellID()"(overrides?: CallOverrides): Promise<BigNumber>;

  impliedYieldToMaturity(overrides?: CallOverrides): Promise<BigNumber>;

  "impliedYieldToMaturity()"(overrides?: CallOverrides): Promise<BigNumber>;

  limitSellYT(
    _amount: BigNumberish,
    _maturityConversionRate: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "limitSellYT(uint256,uint256,uint256,uint256)"(
    _amount: BigNumberish,
    _maturityConversionRate: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  limitSellZCB(
    _amount: BigNumberish,
    _maturityConversionRate: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "limitSellZCB(uint256,uint256,uint256,uint256)"(
    _amount: BigNumberish,
    _maturityConversionRate: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lockedYT(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lockedYT(address)"(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedZCB(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lockedZCB(address)"(
    _depositor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  marketBuyYT(
    _amountYT: BigNumberish,
    _maxMaturityConversionRate: BigNumberish,
    _maxCumulativeMaturityConversionRate: BigNumberish,
    _maxIterations: BigNumberish,
    _useInternalBalances: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "marketBuyYT(uint256,uint256,uint256,uint16,bool)"(
    _amountYT: BigNumberish,
    _maxMaturityConversionRate: BigNumberish,
    _maxCumulativeMaturityConversionRate: BigNumberish,
    _maxIterations: BigNumberish,
    _useInternalBalances: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  marketBuyZCB(
    _amountZCB: BigNumberish,
    _minMaturityConversionRate: BigNumberish,
    _minCumulativeMaturityConversionRate: BigNumberish,
    _maxIterations: BigNumberish,
    _useInternalBalances: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "marketBuyZCB(uint256,uint256,uint256,uint16,bool)"(
    _amountZCB: BigNumberish,
    _minMaturityConversionRate: BigNumberish,
    _minCumulativeMaturityConversionRate: BigNumberish,
    _maxIterations: BigNumberish,
    _useInternalBalances: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  marketSellUnitYTtoU(
    _unitAmountYT: BigNumberish,
    _minMaturityConversionRate: BigNumberish,
    _minCumulativeMaturityConversionRate: BigNumberish,
    _maxIterations: BigNumberish,
    _useInternalBalances: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "marketSellUnitYTtoU(uint256,uint256,uint256,uint16,bool)"(
    _unitAmountYT: BigNumberish,
    _minMaturityConversionRate: BigNumberish,
    _minCumulativeMaturityConversionRate: BigNumberish,
    _maxIterations: BigNumberish,
    _useInternalBalances: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  marketSellYT(
    _amountYT: BigNumberish,
    _minMaturityConversionRate: BigNumberish,
    _minCumulativeMaturityConversionRate: BigNumberish,
    _maxIterations: BigNumberish,
    _useInternalBalances: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "marketSellYT(uint256,uint256,uint256,uint16,bool)"(
    _amountYT: BigNumberish,
    _minMaturityConversionRate: BigNumberish,
    _minCumulativeMaturityConversionRate: BigNumberish,
    _maxIterations: BigNumberish,
    _useInternalBalances: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  marketSellZCB(
    _amountZCB: BigNumberish,
    _maxMaturityConversionRate: BigNumberish,
    _maxCumulativeMaturityConversionRate: BigNumberish,
    _maxIterations: BigNumberish,
    _useInternalBalances: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "marketSellZCB(uint256,uint256,uint256,uint16,bool)"(
    _amountZCB: BigNumberish,
    _maxMaturityConversionRate: BigNumberish,
    _maxCumulativeMaturityConversionRate: BigNumberish,
    _maxIterations: BigNumberish,
    _useInternalBalances: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  marketSellZCBtoU(
    _amountZCB: BigNumberish,
    _maxMaturityConversionRate: BigNumberish,
    _maxCumulativeMaturityConversionRate: BigNumberish,
    _maxIterations: BigNumberish,
    _useInternalBalances: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "marketSellZCBtoU(uint256,uint256,uint256,uint16,bool)"(
    _amountZCB: BigNumberish,
    _maxMaturityConversionRate: BigNumberish,
    _maxCumulativeMaturityConversionRate: BigNumberish,
    _maxIterations: BigNumberish,
    _useInternalBalances: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maturity(overrides?: CallOverrides): Promise<number>;

  "maturity()"(overrides?: CallOverrides): Promise<number>;

  modifyYTLimitSell(
    _amount: BigNumberish,
    _targetID: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    _removeBelowMin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "modifyYTLimitSell(int256,uint256,uint256,uint256,bool)"(
    _amount: BigNumberish,
    _targetID: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    _removeBelowMin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  modifyZCBLimitSell(
    _amount: BigNumberish,
    _targetID: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    _removeBelowMin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "modifyZCBLimitSell(int256,uint256,uint256,uint256,bool)"(
    _amount: BigNumberish,
    _targetID: BigNumberish,
    _hintID: BigNumberish,
    _maxSteps: BigNumberish,
    _removeBelowMin: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinimumOrderSize(
    mode: BigNumberish,
    _minimumOrderSize: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinimumOrderSize(uint8,uint256)"(
    mode: BigNumberish,
    _minimumOrderSize: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOracleMCR(
    _MCR: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracleMCR(uint256)"(
    _MCR: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _amountYield: BigNumberish,
    _amountBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,int256)"(
    _amountYield: BigNumberish,
    _amountBond: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  wrapper(overrides?: CallOverrides): Promise<string>;

  "wrapper()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BondDeposited(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "BondDeposited(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    FCP(overrides?: CallOverrides): Promise<string>;

    "FCP()"(overrides?: CallOverrides): Promise<string>;

    IORC(overrides?: CallOverrides): Promise<string>;

    "IORC()"(overrides?: CallOverrides): Promise<string>;

    YTSells(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      maker: string;
      amount: BigNumber;
      maturityConversionRate: BigNumber;
      nextID: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "YTSells(uint256)"(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      maker: string;
      amount: BigNumber;
      maturityConversionRate: BigNumber;
      nextID: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    YieldDeposited(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "YieldDeposited(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ZCBSells(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      maker: string;
      amount: BigNumber;
      maturityConversionRate: BigNumber;
      nextID: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "ZCBSells(uint256)"(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      maker: string;
      amount: BigNumber;
      maturityConversionRate: BigNumber;
      nextID: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    claimRevenue(overrides?: CallOverrides): Promise<void>;

    "claimRevenue()"(overrides?: CallOverrides): Promise<void>;

    deposit(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceClaimSubAccountRewards(overrides?: CallOverrides): Promise<void>;

    "forceClaimSubAccountRewards()"(overrides?: CallOverrides): Promise<void>;

    forceRateDataUpdate(overrides?: CallOverrides): Promise<void>;

    "forceRateDataUpdate()"(overrides?: CallOverrides): Promise<void>;

    getAPYFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getAPYFromOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getImpliedMCRFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getImpliedMCRFromOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumOrderSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinimumOrderSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumOrderSizeMode(overrides?: CallOverrides): Promise<number>;

    "getMinimumOrderSizeMode()"(overrides?: CallOverrides): Promise<number>;

    getOracleData(overrides?: CallOverrides): Promise<{
      _impliedMCRs: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      _lastDatapointCollection: BigNumber;
      _oracleMCR: BigNumber;
      _toSet: number;
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    "getOracleData()"(overrides?: CallOverrides): Promise<{
      _impliedMCRs: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      _lastDatapointCollection: BigNumber;
      _oracleMCR: BigNumber;
      _toSet: number;
      0: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      1: BigNumber;
      2: BigNumber;
      3: number;
    }>;

    headYTSellID(overrides?: CallOverrides): Promise<BigNumber>;

    "headYTSellID()"(overrides?: CallOverrides): Promise<BigNumber>;

    headZCBSellID(overrides?: CallOverrides): Promise<BigNumber>;

    "headZCBSellID()"(overrides?: CallOverrides): Promise<BigNumber>;

    impliedYieldToMaturity(overrides?: CallOverrides): Promise<BigNumber>;

    "impliedYieldToMaturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    limitSellYT(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "limitSellYT(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    limitSellZCB(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "limitSellZCB(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockedYT(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lockedYT(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedZCB(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedZCB(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketBuyYT(
      _amountYT: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: CallOverrides
    ): Promise<{
      YTbought: BigNumber;
      ZCBsold: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "marketBuyYT(uint256,uint256,uint256,uint16,bool)"(
      _amountYT: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: CallOverrides
    ): Promise<{
      YTbought: BigNumber;
      ZCBsold: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    marketBuyZCB(
      _amountZCB: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: CallOverrides
    ): Promise<{
      ZCBbought: BigNumber;
      YTsold: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "marketBuyZCB(uint256,uint256,uint256,uint16,bool)"(
      _amountZCB: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: CallOverrides
    ): Promise<{
      ZCBbought: BigNumber;
      YTsold: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    marketSellUnitYTtoU(
      _unitAmountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: CallOverrides
    ): Promise<{
      ZCBbought: BigNumber;
      YTsold: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "marketSellUnitYTtoU(uint256,uint256,uint256,uint16,bool)"(
      _unitAmountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: CallOverrides
    ): Promise<{
      ZCBbought: BigNumber;
      YTsold: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    marketSellYT(
      _amountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: CallOverrides
    ): Promise<{
      ZCBbought: BigNumber;
      YTsold: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "marketSellYT(uint256,uint256,uint256,uint16,bool)"(
      _amountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: CallOverrides
    ): Promise<{
      ZCBbought: BigNumber;
      YTsold: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    marketSellZCB(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: CallOverrides
    ): Promise<{
      YTbought: BigNumber;
      ZCBsold: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "marketSellZCB(uint256,uint256,uint256,uint16,bool)"(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: CallOverrides
    ): Promise<{
      YTbought: BigNumber;
      ZCBsold: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    marketSellZCBtoU(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: CallOverrides
    ): Promise<{
      YTbought: BigNumber;
      ZCBsold: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "marketSellZCBtoU(uint256,uint256,uint256,uint16,bool)"(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: CallOverrides
    ): Promise<{
      YTbought: BigNumber;
      ZCBsold: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    maturity(overrides?: CallOverrides): Promise<number>;

    "maturity()"(overrides?: CallOverrides): Promise<number>;

    modifyYTLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "modifyYTLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyZCBLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "modifyZCBLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMinimumOrderSize(
      mode: BigNumberish,
      _minimumOrderSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimumOrderSize(uint8,uint256)"(
      mode: BigNumberish,
      _minimumOrderSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleMCR(_MCR: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setOracleMCR(uint256)"(
      _MCR: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapper(overrides?: CallOverrides): Promise<string>;

    "wrapper()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Deposit(
      to: string | null,
      yieldDeposit: null,
      bondDeposit: null
    ): EventFilter;

    MakeLimitSellYT(
      maker: string | null,
      prevID: null,
      newID: null,
      amount: null,
      maturityConversionRate: null
    ): EventFilter;

    MakeLimitSellZCB(
      maker: string | null,
      prevID: null,
      newID: null,
      amount: null,
      maturityConversionRate: null
    ): EventFilter;

    MarketBuyYT(
      taker: string | null,
      newYTSellHeadID: null,
      headAmount: null
    ): EventFilter;

    MarketBuyZCB(
      taker: string | null,
      newZCBSellHeadID: null,
      headAmount: null
    ): EventFilter;

    ModifyOrder(orderID: null, change: null): EventFilter;

    Withdrawal(
      from: string | null,
      yieldWithdrawn: null,
      bondWithdrawn: null
    ): EventFilter;
  };

  estimateGas: {
    BondDeposited(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "BondDeposited(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    FCP(overrides?: CallOverrides): Promise<BigNumber>;

    "FCP()"(overrides?: CallOverrides): Promise<BigNumber>;

    IORC(overrides?: CallOverrides): Promise<BigNumber>;

    "IORC()"(overrides?: CallOverrides): Promise<BigNumber>;

    YTSells(_ID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "YTSells(uint256)"(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    YieldDeposited(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "YieldDeposited(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ZCBSells(_ID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "ZCBSells(uint256)"(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRevenue(overrides?: Overrides): Promise<BigNumber>;

    "claimRevenue()"(overrides?: Overrides): Promise<BigNumber>;

    deposit(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forceClaimSubAccountRewards(overrides?: Overrides): Promise<BigNumber>;

    "forceClaimSubAccountRewards()"(overrides?: Overrides): Promise<BigNumber>;

    forceRateDataUpdate(overrides?: Overrides): Promise<BigNumber>;

    "forceRateDataUpdate()"(overrides?: Overrides): Promise<BigNumber>;

    getAPYFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getAPYFromOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getImpliedMCRFromOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getImpliedMCRFromOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumOrderSize(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinimumOrderSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinimumOrderSizeMode(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinimumOrderSizeMode()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOracleData(overrides?: CallOverrides): Promise<BigNumber>;

    "getOracleData()"(overrides?: CallOverrides): Promise<BigNumber>;

    headYTSellID(overrides?: CallOverrides): Promise<BigNumber>;

    "headYTSellID()"(overrides?: CallOverrides): Promise<BigNumber>;

    headZCBSellID(overrides?: CallOverrides): Promise<BigNumber>;

    "headZCBSellID()"(overrides?: CallOverrides): Promise<BigNumber>;

    impliedYieldToMaturity(overrides?: CallOverrides): Promise<BigNumber>;

    "impliedYieldToMaturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    limitSellYT(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "limitSellYT(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    limitSellZCB(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "limitSellZCB(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lockedYT(_depositor: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lockedYT(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedZCB(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedZCB(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketBuyYT(
      _amountYT: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "marketBuyYT(uint256,uint256,uint256,uint16,bool)"(
      _amountYT: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    marketBuyZCB(
      _amountZCB: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "marketBuyZCB(uint256,uint256,uint256,uint16,bool)"(
      _amountZCB: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    marketSellUnitYTtoU(
      _unitAmountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "marketSellUnitYTtoU(uint256,uint256,uint256,uint16,bool)"(
      _unitAmountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    marketSellYT(
      _amountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "marketSellYT(uint256,uint256,uint256,uint16,bool)"(
      _amountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    marketSellZCB(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "marketSellZCB(uint256,uint256,uint256,uint16,bool)"(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    marketSellZCBtoU(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "marketSellZCBtoU(uint256,uint256,uint256,uint16,bool)"(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    "maturity()"(overrides?: CallOverrides): Promise<BigNumber>;

    modifyYTLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "modifyYTLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    modifyZCBLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "modifyZCBLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinimumOrderSize(
      mode: BigNumberish,
      _minimumOrderSize: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinimumOrderSize(uint8,uint256)"(
      mode: BigNumberish,
      _minimumOrderSize: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOracleMCR(_MCR: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setOracleMCR(uint256)"(
      _MCR: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    wrapper(overrides?: CallOverrides): Promise<BigNumber>;

    "wrapper()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BondDeposited(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "BondDeposited(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FCP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FCP()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    IORC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "IORC()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YTSells(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "YTSells(uint256)"(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    YieldDeposited(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "YieldDeposited(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ZCBSells(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ZCBSells(uint256)"(
      _ID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRevenue(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimRevenue()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    deposit(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forceClaimSubAccountRewards(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forceClaimSubAccountRewards()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forceRateDataUpdate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "forceRateDataUpdate()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAPYFromOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAPYFromOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImpliedMCRFromOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getImpliedMCRFromOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumOrderSize(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinimumOrderSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumOrderSizeMode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinimumOrderSizeMode()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOracleData()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    headYTSellID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "headYTSellID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    headZCBSellID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "headZCBSellID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    impliedYieldToMaturity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "impliedYieldToMaturity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limitSellYT(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "limitSellYT(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    limitSellZCB(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "limitSellZCB(uint256,uint256,uint256,uint256)"(
      _amount: BigNumberish,
      _maturityConversionRate: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lockedYT(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedYT(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedZCB(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedZCB(address)"(
      _depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketBuyYT(
      _amountYT: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "marketBuyYT(uint256,uint256,uint256,uint16,bool)"(
      _amountYT: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    marketBuyZCB(
      _amountZCB: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "marketBuyZCB(uint256,uint256,uint256,uint16,bool)"(
      _amountZCB: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    marketSellUnitYTtoU(
      _unitAmountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "marketSellUnitYTtoU(uint256,uint256,uint256,uint16,bool)"(
      _unitAmountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    marketSellYT(
      _amountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "marketSellYT(uint256,uint256,uint256,uint16,bool)"(
      _amountYT: BigNumberish,
      _minMaturityConversionRate: BigNumberish,
      _minCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    marketSellZCB(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "marketSellZCB(uint256,uint256,uint256,uint16,bool)"(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    marketSellZCBtoU(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "marketSellZCBtoU(uint256,uint256,uint256,uint16,bool)"(
      _amountZCB: BigNumberish,
      _maxMaturityConversionRate: BigNumberish,
      _maxCumulativeMaturityConversionRate: BigNumberish,
      _maxIterations: BigNumberish,
      _useInternalBalances: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maturity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maturity()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modifyYTLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "modifyYTLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    modifyZCBLimitSell(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "modifyZCBLimitSell(int256,uint256,uint256,uint256,bool)"(
      _amount: BigNumberish,
      _targetID: BigNumberish,
      _hintID: BigNumberish,
      _maxSteps: BigNumberish,
      _removeBelowMin: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinimumOrderSize(
      mode: BigNumberish,
      _minimumOrderSize: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinimumOrderSize(uint8,uint256)"(
      mode: BigNumberish,
      _minimumOrderSize: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOracleMCR(
      _MCR: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracleMCR(uint256)"(
      _MCR: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,int256)"(
      _amountYield: BigNumberish,
      _amountBond: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    wrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wrapper()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
